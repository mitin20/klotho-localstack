"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.srcmak = void 0;
const path = __importStar(require("path"));
const util_1 = require("util");
const fs = __importStar(require("fs-extra"));
const ncp_1 = require("ncp");
const compile_1 = require("./compile");
const util_2 = require("./util");
const ncp = (0, util_1.promisify)(ncp_1.ncp);
const pacmakModule = require.resolve('jsii-pacmak/bin/jsii-pacmak');
async function srcmak(srcdir, options = {}) {
    if (!(await fs.pathExists(srcdir))) {
        throw new Error(`unable to find source directory ${srcdir}`);
    }
    await (0, util_2.mkdtemp)(async (workdir) => {
        // copy sources to temp directory
        await fs.copy(srcdir, workdir);
        // perform jsii compilation
        await (0, compile_1.compile)(workdir, options);
        // extract .jsii if requested
        if (options.jsii) {
            await fs.copy(path.join(workdir, '.jsii'), options.jsii.path);
        }
        // run pacmak to generate code
        await (0, util_2.exec)(pacmakModule, ['--code-only'], { cwd: workdir });
        // extract code based on selected languages
        if (options.python) {
            const reldir = options.python.moduleName.replace(/\./g, '/'); // jsii replaces "." with "/"
            const source = path.resolve(path.join(workdir, 'dist/python/src', reldir));
            const target = path.join(options.python.outdir, reldir);
            await fs.move(source, target, { overwrite: true });
        }
        if (options.java) {
            const source = path.resolve(path.join(workdir, 'dist/java/src/'));
            const target = path.join(options.java.outdir, 'src/');
            await fs.mkdirp(target); // make sure target directory exists
            await ncp(source, target, { clobber: false });
        }
        if (options.csharp) {
            const reldir = options.csharp.namespace;
            const source = path.resolve(path.join(workdir, 'dist/dotnet/', reldir));
            const target = path.join(options.csharp.outdir, reldir);
            await fs.move(source, target, { overwrite: true });
        }
        if (options.golang) {
            const reldir = options.golang.packageName;
            const source = path.resolve(path.join(workdir, 'dist/go/', reldir));
            const target = path.join(options.golang.outdir, reldir);
            await fs.move(source, target, { overwrite: true });
            // remove go.mod as this would make it a submodule
            await fs.remove(path.join(target, 'go.mod'));
        }
    });
}
exports.srcmak = srcmak;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3JjbWFrLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3NyY21hay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLDJDQUE2QjtBQUM3QiwrQkFBaUM7QUFDakMsNkNBQStCO0FBQy9CLDZCQUFrQztBQUNsQyx1Q0FBb0M7QUFFcEMsaUNBQXVDO0FBRXZDLE1BQU0sR0FBRyxHQUFHLElBQUEsZ0JBQVMsRUFBQyxTQUFJLENBQUMsQ0FBQztBQUU1QixNQUFNLFlBQVksR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLDZCQUE2QixDQUFDLENBQUM7QUFFN0QsS0FBSyxVQUFVLE1BQU0sQ0FBQyxNQUFjLEVBQUUsVUFBbUIsRUFBRztJQUNqRSxJQUFJLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRTtRQUNsQyxNQUFNLElBQUksS0FBSyxDQUFDLG1DQUFtQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO0tBQzlEO0lBRUQsTUFBTSxJQUFBLGNBQU8sRUFBQyxLQUFLLEVBQUMsT0FBTyxFQUFDLEVBQUU7UUFDNUIsaUNBQWlDO1FBQ2pDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFFL0IsMkJBQTJCO1FBQzNCLE1BQU0sSUFBQSxpQkFBTyxFQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztRQUVoQyw2QkFBNkI7UUFDN0IsSUFBSSxPQUFPLENBQUMsSUFBSSxFQUFFO1lBQ2hCLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsRUFBRSxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQy9EO1FBRUQsOEJBQThCO1FBQzlCLE1BQU0sSUFBQSxXQUFJLEVBQUMsWUFBWSxFQUFFLENBQUMsYUFBYSxDQUFDLEVBQUUsRUFBRSxHQUFHLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztRQUU1RCwyQ0FBMkM7UUFDM0MsSUFBSSxPQUFPLENBQUMsTUFBTSxFQUFFO1lBQ2xCLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyw2QkFBNkI7WUFDM0YsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQzNFLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDeEQsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztTQUNwRDtRQUVELElBQUksT0FBTyxDQUFDLElBQUksRUFBRTtZQUNoQixNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLGdCQUFnQixDQUFDLENBQUMsQ0FBQztZQUNsRSxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQ3RELE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLG9DQUFvQztZQUM3RCxNQUFNLEdBQUcsQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7U0FDL0M7UUFFRCxJQUFJLE9BQU8sQ0FBQyxNQUFNLEVBQUU7WUFDbEIsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUM7WUFDeEMsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUN4RSxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQ3hELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7U0FDcEQ7UUFFRCxJQUFJLE9BQU8sQ0FBQyxNQUFNLEVBQUU7WUFDbEIsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUM7WUFDMUMsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUNwRSxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQ3hELE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7WUFDbkQsa0RBQWtEO1lBQ2xELE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO1NBQzlDO0lBQ0gsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDO0FBbkRELHdCQW1EQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBwcm9taXNpZnkgfSBmcm9tICd1dGlsJztcbmltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzLWV4dHJhJztcbmltcG9ydCB7IG5jcCBhcyBfbmNwIH0gZnJvbSAnbmNwJztcbmltcG9ydCB7IGNvbXBpbGUgfSBmcm9tICcuL2NvbXBpbGUnO1xuaW1wb3J0IHsgT3B0aW9ucyB9IGZyb20gJy4vb3B0aW9ucyc7XG5pbXBvcnQgeyBleGVjLCBta2R0ZW1wIH0gZnJvbSAnLi91dGlsJztcblxuY29uc3QgbmNwID0gcHJvbWlzaWZ5KF9uY3ApO1xuXG5jb25zdCBwYWNtYWtNb2R1bGUgPSByZXF1aXJlLnJlc29sdmUoJ2pzaWktcGFjbWFrL2Jpbi9qc2lpLXBhY21haycpO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc3JjbWFrKHNyY2Rpcjogc3RyaW5nLCBvcHRpb25zOiBPcHRpb25zID0geyB9KSB7XG4gIGlmICghKGF3YWl0IGZzLnBhdGhFeGlzdHMoc3JjZGlyKSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYHVuYWJsZSB0byBmaW5kIHNvdXJjZSBkaXJlY3RvcnkgJHtzcmNkaXJ9YCk7XG4gIH1cblxuICBhd2FpdCBta2R0ZW1wKGFzeW5jIHdvcmtkaXIgPT4ge1xuICAgIC8vIGNvcHkgc291cmNlcyB0byB0ZW1wIGRpcmVjdG9yeVxuICAgIGF3YWl0IGZzLmNvcHkoc3JjZGlyLCB3b3JrZGlyKTtcblxuICAgIC8vIHBlcmZvcm0ganNpaSBjb21waWxhdGlvblxuICAgIGF3YWl0IGNvbXBpbGUod29ya2Rpciwgb3B0aW9ucyk7XG5cbiAgICAvLyBleHRyYWN0IC5qc2lpIGlmIHJlcXVlc3RlZFxuICAgIGlmIChvcHRpb25zLmpzaWkpIHtcbiAgICAgIGF3YWl0IGZzLmNvcHkocGF0aC5qb2luKHdvcmtkaXIsICcuanNpaScpLCBvcHRpb25zLmpzaWkucGF0aCk7XG4gICAgfVxuXG4gICAgLy8gcnVuIHBhY21hayB0byBnZW5lcmF0ZSBjb2RlXG4gICAgYXdhaXQgZXhlYyhwYWNtYWtNb2R1bGUsIFsnLS1jb2RlLW9ubHknXSwgeyBjd2Q6IHdvcmtkaXIgfSk7XG5cbiAgICAvLyBleHRyYWN0IGNvZGUgYmFzZWQgb24gc2VsZWN0ZWQgbGFuZ3VhZ2VzXG4gICAgaWYgKG9wdGlvbnMucHl0aG9uKSB7XG4gICAgICBjb25zdCByZWxkaXIgPSBvcHRpb25zLnB5dGhvbi5tb2R1bGVOYW1lLnJlcGxhY2UoL1xcLi9nLCAnLycpOyAvLyBqc2lpIHJlcGxhY2VzIFwiLlwiIHdpdGggXCIvXCJcbiAgICAgIGNvbnN0IHNvdXJjZSA9IHBhdGgucmVzb2x2ZShwYXRoLmpvaW4od29ya2RpciwgJ2Rpc3QvcHl0aG9uL3NyYycsIHJlbGRpcikpO1xuICAgICAgY29uc3QgdGFyZ2V0ID0gcGF0aC5qb2luKG9wdGlvbnMucHl0aG9uLm91dGRpciwgcmVsZGlyKTtcbiAgICAgIGF3YWl0IGZzLm1vdmUoc291cmNlLCB0YXJnZXQsIHsgb3ZlcndyaXRlOiB0cnVlIH0pO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmphdmEpIHtcbiAgICAgIGNvbnN0IHNvdXJjZSA9IHBhdGgucmVzb2x2ZShwYXRoLmpvaW4od29ya2RpciwgJ2Rpc3QvamF2YS9zcmMvJykpO1xuICAgICAgY29uc3QgdGFyZ2V0ID0gcGF0aC5qb2luKG9wdGlvbnMuamF2YS5vdXRkaXIsICdzcmMvJyk7XG4gICAgICBhd2FpdCBmcy5ta2RpcnAodGFyZ2V0KTsgLy8gbWFrZSBzdXJlIHRhcmdldCBkaXJlY3RvcnkgZXhpc3RzXG4gICAgICBhd2FpdCBuY3Aoc291cmNlLCB0YXJnZXQsIHsgY2xvYmJlcjogZmFsc2UgfSk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuY3NoYXJwKSB7XG4gICAgICBjb25zdCByZWxkaXIgPSBvcHRpb25zLmNzaGFycC5uYW1lc3BhY2U7XG4gICAgICBjb25zdCBzb3VyY2UgPSBwYXRoLnJlc29sdmUocGF0aC5qb2luKHdvcmtkaXIsICdkaXN0L2RvdG5ldC8nLCByZWxkaXIpKTtcbiAgICAgIGNvbnN0IHRhcmdldCA9IHBhdGguam9pbihvcHRpb25zLmNzaGFycC5vdXRkaXIsIHJlbGRpcik7XG4gICAgICBhd2FpdCBmcy5tb3ZlKHNvdXJjZSwgdGFyZ2V0LCB7IG92ZXJ3cml0ZTogdHJ1ZSB9KTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5nb2xhbmcpIHtcbiAgICAgIGNvbnN0IHJlbGRpciA9IG9wdGlvbnMuZ29sYW5nLnBhY2thZ2VOYW1lO1xuICAgICAgY29uc3Qgc291cmNlID0gcGF0aC5yZXNvbHZlKHBhdGguam9pbih3b3JrZGlyLCAnZGlzdC9nby8nLCByZWxkaXIpKTtcbiAgICAgIGNvbnN0IHRhcmdldCA9IHBhdGguam9pbihvcHRpb25zLmdvbGFuZy5vdXRkaXIsIHJlbGRpcik7XG4gICAgICBhd2FpdCBmcy5tb3ZlKHNvdXJjZSwgdGFyZ2V0LCB7IG92ZXJ3cml0ZTogdHJ1ZSB9KTtcbiAgICAgIC8vIHJlbW92ZSBnby5tb2QgYXMgdGhpcyB3b3VsZCBtYWtlIGl0IGEgc3VibW9kdWxlXG4gICAgICBhd2FpdCBmcy5yZW1vdmUocGF0aC5qb2luKHRhcmdldCwgJ2dvLm1vZCcpKTtcbiAgICB9XG4gIH0pO1xufVxuIl19