"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Yaml = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const child_process_1 = require("child_process");
const fs = require("fs");
const os = require("os");
const path = require("path");
const YAML = require("yaml");
const MAX_DOWNLOAD_BUFFER = 10 * 1024 * 1024;
// Set default YAML schema to 1.1. This ensures saved YAML is backward compatible with other parsers, such as PyYAML
// It also ensures that octal numbers in the form `0775` will be parsed
// correctly on YAML load. (see https://github.com/eemeli/yaml/issues/205)
const yamlSchemaVersion = '1.1';
/**
 * YAML utilities.
 */
class Yaml {
    /**
     * Utility class.
     */
    constructor() {
        return;
    }
    /**
     * @deprecated use `stringify(doc[, doc, ...])`
     */
    static formatObjects(docs) {
        return this.stringify(...docs);
    }
    /**
     * Saves a set of objects as a multi-document YAML file.
     * @param filePath The output path
     * @param docs The set of objects
     */
    static save(filePath, docs) {
        const data = this.stringify(...docs);
        fs.writeFileSync(filePath, data, { encoding: 'utf8' });
    }
    /**
     * Stringify a document (or multiple documents) into YAML
     *
     * We convert undefined values to null, but ignore any documents that are
     * undefined.
     *
     * @param docs A set of objects to convert to YAML
     * @returns a YAML string. Multiple docs are separated by `---`.
     */
    static stringify(...docs) {
        return docs.map(r => r === undefined ? '\n' : YAML.stringify(r, { keepUndefined: true, lineWidth: 0, version: yamlSchemaVersion })).join('---\n');
    }
    /**
     * Saves a set of YAML documents into a temp file (in /tmp)
     *
     * @returns the path to the temporary file
     * @param docs the set of documents to save
     */
    static tmp(docs) {
        const tmpdir = fs.mkdtempSync(path.join(os.tmpdir(), 'cdk8s-'));
        const filePath = path.join(tmpdir, 'temp.yaml');
        Yaml.save(filePath, docs);
        return filePath;
    }
    /**
     * Downloads a set of YAML documents (k8s manifest for example) from a URL or
     * a file and returns them as javascript objects.
     *
     * Empty documents are filtered out.
     *
     * @param urlOrFile a URL of a file path to load from
     * @returns an array of objects, each represents a document inside the YAML
     */
    static load(urlOrFile) {
        const body = loadurl(urlOrFile);
        const objects = YAML.parseAllDocuments(body, {
            version: yamlSchemaVersion,
        });
        const result = new Array();
        for (const obj of objects.map(x => x.toJSON())) {
            // skip empty documents
            if (obj === undefined) {
                continue;
            }
            if (obj === null) {
                continue;
            }
            if (Array.isArray(obj) && obj.length === 0) {
                continue;
            }
            if (typeof (obj) === 'object' && Object.keys(obj).length === 0) {
                continue;
            }
            result.push(obj);
        }
        return result;
    }
}
exports.Yaml = Yaml;
_a = JSII_RTTI_SYMBOL_1;
Yaml[_a] = { fqn: "cdk8s.Yaml", version: "2.7.77" };
/**
 * Loads a url (or file) and returns the contents.
 * This method spawns a child process in order to perform an http call synchronously.
 */
function loadurl(url) {
    const script = path.join(__dirname, '_loadurl.js');
    return child_process_1.execFileSync(process.execPath, [script, url], {
        encoding: 'utf-8',
        maxBuffer: MAX_DOWNLOAD_BUFFER,
    }).toString();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieWFtbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy95YW1sLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsaURBQTZDO0FBQzdDLHlCQUF5QjtBQUN6Qix5QkFBeUI7QUFDekIsNkJBQTZCO0FBQzdCLDZCQUE2QjtBQUU3QixNQUFNLG1CQUFtQixHQUFHLEVBQUUsR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDO0FBRTdDLG9IQUFvSDtBQUNwSCx1RUFBdUU7QUFDdkUsMEVBQTBFO0FBQzFFLE1BQU0saUJBQWlCLEdBQUcsS0FBSyxDQUFDO0FBRWhDOztHQUVHO0FBQ0gsTUFBYSxJQUFJO0lBNEVmOztPQUVHO0lBQ0g7UUFDRSxPQUFPO0lBQ1QsQ0FBQztJQWhGRDs7T0FFRztJQUNJLE1BQU0sQ0FBQyxhQUFhLENBQUMsSUFBVztRQUNyQyxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQztJQUNqQyxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNJLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBZ0IsRUFBRSxJQUFXO1FBQzlDLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQztRQUNyQyxFQUFFLENBQUMsYUFBYSxDQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUUsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztJQUN6RCxDQUFDO0lBRUQ7Ozs7Ozs7O09BUUc7SUFDSSxNQUFNLENBQUMsU0FBUyxDQUFDLEdBQUcsSUFBVztRQUNwQyxPQUFPLElBQUksQ0FBQyxHQUFHLENBQ2IsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLEVBQUUsYUFBYSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxDQUFDLENBQ25ILENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ2xCLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNJLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBVztRQUMzQixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDaEUsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFDaEQsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDMUIsT0FBTyxRQUFRLENBQUM7SUFDbEIsQ0FBQztJQUVEOzs7Ozs7OztPQVFHO0lBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFpQjtRQUNsQyxNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7UUFFaEMsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksRUFBRTtZQUMzQyxPQUFPLEVBQUUsaUJBQWlCO1NBQzNCLENBQUMsQ0FBQztRQUNILE1BQU0sTUFBTSxHQUFHLElBQUksS0FBSyxFQUFPLENBQUM7UUFFaEMsS0FBSyxNQUFNLEdBQUcsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUU7WUFDOUMsdUJBQXVCO1lBQ3ZCLElBQUksR0FBRyxLQUFLLFNBQVMsRUFBRTtnQkFBRSxTQUFTO2FBQUU7WUFDcEMsSUFBSSxHQUFHLEtBQUssSUFBSSxFQUFFO2dCQUFFLFNBQVM7YUFBRTtZQUMvQixJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksR0FBRyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7Z0JBQUUsU0FBUzthQUFFO1lBQ3pELElBQUksT0FBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLFFBQVEsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7Z0JBQUUsU0FBUzthQUFFO1lBRTVFLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDbEI7UUFFRCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDOztBQTFFSCxvQkFrRkM7OztBQUVEOzs7R0FHRztBQUNILFNBQVMsT0FBTyxDQUFDLEdBQVc7SUFDMUIsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsYUFBYSxDQUFDLENBQUM7SUFDbkQsT0FBTyw0QkFBWSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLEVBQUU7UUFDbkQsUUFBUSxFQUFFLE9BQU87UUFDakIsU0FBUyxFQUFFLG1CQUFtQjtLQUMvQixDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7QUFDaEIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGV4ZWNGaWxlU3luYyB9IGZyb20gJ2NoaWxkX3Byb2Nlc3MnO1xuaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMnO1xuaW1wb3J0ICogYXMgb3MgZnJvbSAnb3MnO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCAqIGFzIFlBTUwgZnJvbSAneWFtbCc7XG5cbmNvbnN0IE1BWF9ET1dOTE9BRF9CVUZGRVIgPSAxMCAqIDEwMjQgKiAxMDI0O1xuXG4vLyBTZXQgZGVmYXVsdCBZQU1MIHNjaGVtYSB0byAxLjEuIFRoaXMgZW5zdXJlcyBzYXZlZCBZQU1MIGlzIGJhY2t3YXJkIGNvbXBhdGlibGUgd2l0aCBvdGhlciBwYXJzZXJzLCBzdWNoIGFzIFB5WUFNTFxuLy8gSXQgYWxzbyBlbnN1cmVzIHRoYXQgb2N0YWwgbnVtYmVycyBpbiB0aGUgZm9ybSBgMDc3NWAgd2lsbCBiZSBwYXJzZWRcbi8vIGNvcnJlY3RseSBvbiBZQU1MIGxvYWQuIChzZWUgaHR0cHM6Ly9naXRodWIuY29tL2VlbWVsaS95YW1sL2lzc3Vlcy8yMDUpXG5jb25zdCB5YW1sU2NoZW1hVmVyc2lvbiA9ICcxLjEnO1xuXG4vKipcbiAqIFlBTUwgdXRpbGl0aWVzLlxuICovXG5leHBvcnQgY2xhc3MgWWFtbCB7XG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZCB1c2UgYHN0cmluZ2lmeShkb2NbLCBkb2MsIC4uLl0pYFxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBmb3JtYXRPYmplY3RzKGRvY3M6IGFueVtdKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5zdHJpbmdpZnkoLi4uZG9jcyk7XG4gIH1cblxuICAvKipcbiAgICogU2F2ZXMgYSBzZXQgb2Ygb2JqZWN0cyBhcyBhIG11bHRpLWRvY3VtZW50IFlBTUwgZmlsZS5cbiAgICogQHBhcmFtIGZpbGVQYXRoIFRoZSBvdXRwdXQgcGF0aFxuICAgKiBAcGFyYW0gZG9jcyBUaGUgc2V0IG9mIG9iamVjdHNcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgc2F2ZShmaWxlUGF0aDogc3RyaW5nLCBkb2NzOiBhbnlbXSkge1xuICAgIGNvbnN0IGRhdGEgPSB0aGlzLnN0cmluZ2lmeSguLi5kb2NzKTtcbiAgICBmcy53cml0ZUZpbGVTeW5jKGZpbGVQYXRoLCBkYXRhLCB7IGVuY29kaW5nOiAndXRmOCcgfSk7XG4gIH1cblxuICAvKipcbiAgICogU3RyaW5naWZ5IGEgZG9jdW1lbnQgKG9yIG11bHRpcGxlIGRvY3VtZW50cykgaW50byBZQU1MXG4gICAqXG4gICAqIFdlIGNvbnZlcnQgdW5kZWZpbmVkIHZhbHVlcyB0byBudWxsLCBidXQgaWdub3JlIGFueSBkb2N1bWVudHMgdGhhdCBhcmVcbiAgICogdW5kZWZpbmVkLlxuICAgKlxuICAgKiBAcGFyYW0gZG9jcyBBIHNldCBvZiBvYmplY3RzIHRvIGNvbnZlcnQgdG8gWUFNTFxuICAgKiBAcmV0dXJucyBhIFlBTUwgc3RyaW5nLiBNdWx0aXBsZSBkb2NzIGFyZSBzZXBhcmF0ZWQgYnkgYC0tLWAuXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIHN0cmluZ2lmeSguLi5kb2NzOiBhbnlbXSkge1xuICAgIHJldHVybiBkb2NzLm1hcChcbiAgICAgIHIgPT4gciA9PT0gdW5kZWZpbmVkID8gJ1xcbicgOiBZQU1MLnN0cmluZ2lmeShyLCB7IGtlZXBVbmRlZmluZWQ6IHRydWUsIGxpbmVXaWR0aDogMCwgdmVyc2lvbjogeWFtbFNjaGVtYVZlcnNpb24gfSksXG4gICAgKS5qb2luKCctLS1cXG4nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTYXZlcyBhIHNldCBvZiBZQU1MIGRvY3VtZW50cyBpbnRvIGEgdGVtcCBmaWxlIChpbiAvdG1wKVxuICAgKlxuICAgKiBAcmV0dXJucyB0aGUgcGF0aCB0byB0aGUgdGVtcG9yYXJ5IGZpbGVcbiAgICogQHBhcmFtIGRvY3MgdGhlIHNldCBvZiBkb2N1bWVudHMgdG8gc2F2ZVxuICAgKi9cbiAgcHVibGljIHN0YXRpYyB0bXAoZG9jczogYW55W10pOiBzdHJpbmcge1xuICAgIGNvbnN0IHRtcGRpciA9IGZzLm1rZHRlbXBTeW5jKHBhdGguam9pbihvcy50bXBkaXIoKSwgJ2NkazhzLScpKTtcbiAgICBjb25zdCBmaWxlUGF0aCA9IHBhdGguam9pbih0bXBkaXIsICd0ZW1wLnlhbWwnKTtcbiAgICBZYW1sLnNhdmUoZmlsZVBhdGgsIGRvY3MpO1xuICAgIHJldHVybiBmaWxlUGF0aDtcbiAgfVxuXG4gIC8qKlxuICAgKiBEb3dubG9hZHMgYSBzZXQgb2YgWUFNTCBkb2N1bWVudHMgKGs4cyBtYW5pZmVzdCBmb3IgZXhhbXBsZSkgZnJvbSBhIFVSTCBvclxuICAgKiBhIGZpbGUgYW5kIHJldHVybnMgdGhlbSBhcyBqYXZhc2NyaXB0IG9iamVjdHMuXG4gICAqXG4gICAqIEVtcHR5IGRvY3VtZW50cyBhcmUgZmlsdGVyZWQgb3V0LlxuICAgKlxuICAgKiBAcGFyYW0gdXJsT3JGaWxlIGEgVVJMIG9mIGEgZmlsZSBwYXRoIHRvIGxvYWQgZnJvbVxuICAgKiBAcmV0dXJucyBhbiBhcnJheSBvZiBvYmplY3RzLCBlYWNoIHJlcHJlc2VudHMgYSBkb2N1bWVudCBpbnNpZGUgdGhlIFlBTUxcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgbG9hZCh1cmxPckZpbGU6IHN0cmluZyk6IGFueVtdIHtcbiAgICBjb25zdCBib2R5ID0gbG9hZHVybCh1cmxPckZpbGUpO1xuXG4gICAgY29uc3Qgb2JqZWN0cyA9IFlBTUwucGFyc2VBbGxEb2N1bWVudHMoYm9keSwge1xuICAgICAgdmVyc2lvbjogeWFtbFNjaGVtYVZlcnNpb24sXG4gICAgfSk7XG4gICAgY29uc3QgcmVzdWx0ID0gbmV3IEFycmF5PGFueT4oKTtcblxuICAgIGZvciAoY29uc3Qgb2JqIG9mIG9iamVjdHMubWFwKHggPT4geC50b0pTT04oKSkpIHtcbiAgICAgIC8vIHNraXAgZW1wdHkgZG9jdW1lbnRzXG4gICAgICBpZiAob2JqID09PSB1bmRlZmluZWQpIHsgY29udGludWU7IH1cbiAgICAgIGlmIChvYmogPT09IG51bGwpIHsgY29udGludWU7IH1cbiAgICAgIGlmIChBcnJheS5pc0FycmF5KG9iaikgJiYgb2JqLmxlbmd0aCA9PT0gMCkgeyBjb250aW51ZTsgfVxuICAgICAgaWYgKHR5cGVvZihvYmopID09PSAnb2JqZWN0JyAmJiBPYmplY3Qua2V5cyhvYmopLmxlbmd0aCA9PT0gMCkgeyBjb250aW51ZTsgfVxuXG4gICAgICByZXN1bHQucHVzaChvYmopO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVXRpbGl0eSBjbGFzcy5cbiAgICovXG4gIHByaXZhdGUgY29uc3RydWN0b3IoKSB7XG4gICAgcmV0dXJuO1xuICB9XG59XG5cbi8qKlxuICogTG9hZHMgYSB1cmwgKG9yIGZpbGUpIGFuZCByZXR1cm5zIHRoZSBjb250ZW50cy5cbiAqIFRoaXMgbWV0aG9kIHNwYXducyBhIGNoaWxkIHByb2Nlc3MgaW4gb3JkZXIgdG8gcGVyZm9ybSBhbiBodHRwIGNhbGwgc3luY2hyb25vdXNseS5cbiAqL1xuZnVuY3Rpb24gbG9hZHVybCh1cmw6IHN0cmluZyk6IHN0cmluZyB7XG4gIGNvbnN0IHNjcmlwdCA9IHBhdGguam9pbihfX2Rpcm5hbWUsICdfbG9hZHVybC5qcycpO1xuICByZXR1cm4gZXhlY0ZpbGVTeW5jKHByb2Nlc3MuZXhlY1BhdGgsIFtzY3JpcHQsIHVybF0sIHtcbiAgICBlbmNvZGluZzogJ3V0Zi04JyxcbiAgICBtYXhCdWZmZXI6IE1BWF9ET1dOTE9BRF9CVUZGRVIsXG4gIH0pLnRvU3RyaW5nKCk7XG59XG4iXX0=