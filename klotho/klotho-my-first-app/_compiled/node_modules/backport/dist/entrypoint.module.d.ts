import { BackportResponse } from './backportRun';
import type { Commit } from './lib/sourceCommit/parseSourceCommit';
import { ConfigFileOptions } from './options/ConfigOptions';
import { ValidConfigOptions } from './options/options';
export type { HandledErrorResult, SuccessResult, UnhandledErrorResult, } from './runSequentially';
export type { BackportAbortResponse, BackportFailureResponse, BackportResponse, BackportSuccessResponse, } from './backportRun';
export { BackportError } from './lib/BackportError';
export type { Commit } from './lib/sourceCommit/parseSourceCommit';
export type { ConfigFileOptions } from './options/ConfigOptions';
export { fetchRemoteProjectConfig as getRemoteProjectConfig } from './lib/github/v4/fetchRemoteProjectConfig';
export { getGlobalConfig as getLocalGlobalConfig } from './options/config/globalConfig';
export declare function backportRun({ options, processArgs, exitCodeOnFailure, }: {
    options: ConfigFileOptions;
    processArgs?: string[];
    exitCodeOnFailure?: boolean;
}): Promise<BackportResponse>;
export declare function getCommits(options: {
    accessToken: string;
    repoName: string;
    repoOwner: string;
    author?: string;
    branchLabelMapping?: ValidConfigOptions['branchLabelMapping'];
    dateSince?: string;
    dateUntil?: string;
    githubApiBaseUrlV4?: string;
    maxNumber?: number;
    onlyMissing?: boolean;
    prFilter?: string;
    pullNumber?: number | number[];
    sha?: string | string[];
    skipRemoteConfig?: boolean;
    sourceBranch?: string;
}): Promise<Commit[]>;
