"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.swallowMissingConfigFileException = exports.parseRemoteConfig = exports.RemoteConfigHistoryFragment = void 0;
const graphql_tag_1 = __importDefault(require("graphql-tag"));
const readConfigFile_1 = require("../options/config/readConfigFile");
const apiRequestV4_1 = require("./github/v4/apiRequestV4");
const logger_1 = require("./logger");
exports.RemoteConfigHistoryFragment = (0, graphql_tag_1.default) `
  fragment RemoteConfigHistoryFragment on Commit {
    remoteConfigHistory: history(first: 1, path: ".backportrc.json") {
      edges {
        remoteConfig: node {
          committedDate
          file(path: ".backportrc.json") {
            ... on TreeEntry {
              object {
                ... on Blob {
                  text
                }
              }
            }
          }
        }
      }
    }
  }
`;
function parseRemoteConfig(remoteConfig) {
    try {
        return (0, readConfigFile_1.withConfigMigrations)(JSON.parse(remoteConfig.file.object.text));
    }
    catch (e) {
        logger_1.logger.info('Parsing remote config failed', e);
        return;
    }
}
exports.parseRemoteConfig = parseRemoteConfig;
function swallowMissingConfigFileException(error) {
    if (!(error instanceof apiRequestV4_1.GithubV4Exception)) {
        throw error;
    }
    const { data, errors } = error.githubResponse.data;
    const missingConfigError = errors?.some((error) => {
        return error.path?.includes('remoteConfig') && error.type === 'NOT_FOUND';
    });
    // swallow error if it's just the config file that's missing
    if (missingConfigError && data != null) {
        return data;
    }
    // Throw unexpected error
    throw error;
}
exports.swallowMissingConfigFileException = swallowMissingConfigFileException;
