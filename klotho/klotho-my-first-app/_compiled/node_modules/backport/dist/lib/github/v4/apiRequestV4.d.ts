import { AxiosResponse } from 'axios';
import { DocumentNode } from 'graphql';
interface GithubError {
    type?: string;
    path?: string[];
    locations?: {
        line: number;
        column: number;
    }[];
    message: string;
}
export interface GithubV4Response<DataResponse> {
    data: DataResponse;
    errors?: GithubError[];
}
declare type Variables = Record<string, string | number | null>;
export declare function apiRequestV4<DataResponse>({ githubApiBaseUrlV4, accessToken, query, variables, }: {
    githubApiBaseUrlV4?: string;
    accessToken: string;
    query: DocumentNode;
    variables?: Variables;
}): Promise<DataResponse>;
declare type AxiosGithubResponse<DataResponse> = AxiosResponse<GithubV4Response<DataResponse | null>, any>;
export declare class GithubV4Exception<DataResponse> extends Error {
    githubResponse: AxiosGithubResponse<DataResponse> & {
        request: undefined;
    };
    constructor(githubResponse: AxiosGithubResponse<DataResponse>, errorMessage?: string);
}
export declare function getQueryName(query: DocumentNode): string;
export {};
