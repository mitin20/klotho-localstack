"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.enablePullRequestAutoMerge = void 0;
const graphql_tag_1 = __importDefault(require("graphql-tag"));
const ora_1 = require("../../../lib/ora");
const logger_1 = require("../../logger");
const FetchPullRequestId_1 = require("./FetchPullRequestId");
const apiRequestV4_1 = require("./apiRequestV4");
async function enablePullRequestAutoMerge(options, targetPullRequestNumber) {
    const { accessToken, githubApiBaseUrlV4, autoMergeMethod = 'merge', } = options;
    const text = `Enabling auto merging via ${options.autoMergeMethod}`;
    logger_1.logger.info(text);
    const spinner = (0, ora_1.ora)(options.interactive, text).start();
    const pullRequestId = await (0, FetchPullRequestId_1.fetchPullRequestId)(options, targetPullRequestNumber);
    const query = (0, graphql_tag_1.default) `
    mutation EnablePullRequestAutoMerge(
      $pullRequestId: ID!
      $mergeMethod: PullRequestMergeMethod!
    ) {
      enablePullRequestAutoMerge(
        input: { pullRequestId: $pullRequestId, mergeMethod: $mergeMethod }
      ) {
        pullRequest {
          number
        }
      }
    }
  `;
    try {
        const res = await (0, apiRequestV4_1.apiRequestV4)({
            githubApiBaseUrlV4,
            accessToken,
            query,
            variables: {
                pullRequestId,
                mergeMethod: autoMergeMethod.toUpperCase(),
            },
        });
        spinner.succeed();
        return res.enablePullRequestAutoMerge.pullRequest?.number;
    }
    catch (e) {
        const err = e;
        spinner.fail();
        logger_1.logger.info(`Could not enable auto merging for ${targetPullRequestNumber} due to ${err.message}`, e);
    }
}
exports.enablePullRequestAutoMerge = enablePullRequestAutoMerge;
