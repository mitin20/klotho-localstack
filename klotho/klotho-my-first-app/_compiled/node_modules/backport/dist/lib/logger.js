"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.redactAccessToken = exports.setAccessToken = exports.consoleLog = exports.initLogger = exports.logger = void 0;
const winston_1 = __importStar(require("winston"));
const env_1 = require("./env");
let _accessToken;
let _interactive;
function initLogger({ interactive, accessToken, logFilePath, }) {
    _accessToken = accessToken;
    _interactive = interactive;
    exports.logger = winston_1.default.createLogger({
        format: winston_1.format.combine(winston_1.format.timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }), 
        // Format the metadata object
        winston_1.format.metadata({
            fillExcept: ['message', 'level', 'timestamp', 'label'],
        })),
        transports: logFilePath
            ? [fileTransport({ logLevel: 'debug', logFilePath })]
            : [
                fileTransport({ logLevel: 'info' }),
                fileTransport({ logLevel: 'debug' }),
            ],
    });
    return exports.logger;
}
exports.initLogger = initLogger;
function fileTransport({ logFilePath, logLevel, }) {
    return new winston_1.default.transports.File({
        filename: (0, env_1.getLogfilePath)({ logFilePath, logLevel }),
        level: logLevel,
        format: winston_1.format.json({
            replacer: (key, value) => {
                return typeof value === 'string' ? redactAccessToken(value) : value;
            },
        }),
    });
}
// wrapper around console.log
function consoleLog(message) {
    if (_interactive) {
        // eslint-disable-next-line no-console
        console.log(redactAccessToken(message));
    }
}
exports.consoleLog = consoleLog;
function setAccessToken(accessToken) {
    _accessToken = accessToken;
}
exports.setAccessToken = setAccessToken;
function redactAccessToken(str) {
    // `redactAccessToken` might be called before access token is set
    if (_accessToken) {
        return str.replaceAll(_accessToken, '<REDACTED>');
    }
    return str;
}
exports.redactAccessToken = redactAccessToken;
