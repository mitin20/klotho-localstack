import winston from 'winston';
export interface TargetBranchChoice {
    name: string;
    checked?: boolean;
}
export declare type TargetBranchChoiceOrString = string | TargetBranchChoice;
declare type AutoFixConflictsHandler = ({ files, directory, logger, targetBranch, }: {
    files: string[];
    directory: string;
    logger: winston.Logger;
    targetBranch: string;
}) => boolean | Promise<boolean>;
declare type Options = Partial<{
    accessToken: string;
    assignees: string[];
    author: string | null;
    autoAssign: boolean;
    autoFixConflicts: AutoFixConflictsHandler;
    autoMerge: boolean;
    autoMergeMethod: string;
    backportBinary: string;
    cherrypickRef: boolean;
    commitPaths: string[];
    details: boolean;
    dir: string;
    dryRun: boolean;
    editor: string;
    fork: boolean;
    gitAuthorEmail: string;
    gitAuthorName: string;
    gitHostname: string;
    githubApiBaseUrlV3: string;
    githubApiBaseUrlV4: string;
    interactive: boolean;
    logFilePath: string;
    ls: boolean;
    maxNumber: number;
    multiple: boolean;
    multipleBranches: boolean;
    multipleCommits: boolean;
    noVerify: boolean;
    prDescription: string;
    prFilter: string;
    projectConfigFile: string;
    prTitle: string;
    publishStatusCommentOnAbort: boolean;
    publishStatusCommentOnFailure: boolean;
    publishStatusCommentOnSuccess: boolean;
    pullNumber: number | number[];
    repoForkOwner: string;
    repoName: string;
    repoOwner: string;
    resetAuthor: boolean;
    reviewers: string[];
    sha: string | string[];
    skipRemoteConfig: boolean;
    sourceBranch: string;
    sourcePRLabels: string[];
    targetBranchChoices: TargetBranchChoiceOrString[];
    targetBranches: string[];
    targetPRLabels: string[];
    signoff: boolean;
}>;
export declare type ConfigFileOptions = Options & Partial<{
    help: boolean;
    version: boolean;
    v: boolean;
    branchLabelMapping: Record<string, string>;
    /**
     * @deprecated Replaced by `repoOwner` and `repoName`
     */
    upstream: string;
    /**
     * @deprecated Replaced by `targetBranchChoices`
     */
    branches: TargetBranchChoiceOrString[];
    /**
     * @deprecated Replaced by `targetPRLabels`
     */
    labels: string[];
}>;
export {};
