"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const promises_1 = __importDefault(require("fs/promises"));
const child_process_promisified_1 = require("../../../lib/child-process-promisified");
const getDevAccessToken_1 = require("../../private/getDevAccessToken");
const sandbox_1 = require("../../sandbox");
const runBackportViaCli_1 = require("./runBackportViaCli");
const accessToken = (0, getDevAccessToken_1.getDevAccessToken)();
describe('commit author', () => {
    let sourceRepo;
    let backportRepo;
    beforeEach(async () => {
        const sandboxPath = (0, sandbox_1.getSandboxPath)({ filename: __filename });
        await (0, sandbox_1.resetSandbox)(sandboxPath);
        sourceRepo = `${sandboxPath}/sourceRepo`;
        backportRepo = `${sandboxPath}/backportRepo`;
        await (0, child_process_promisified_1.exec)(`git clone https://github.com/backport-org/commit-author.git ${sourceRepo}`, { cwd: sandboxPath });
        await promises_1.default.writeFile(`${sandboxPath}/.backportrc.json`, JSON.stringify({
            repoName: 'commit-author',
            repoOwner: 'backport-org',
        }));
    });
    // eslint-disable-next-line jest/no-commented-out-tests
    // it('use commit author from source commit', async () => {
    //   await runBackportViaCli(
    //     [
    //       `--accessToken=${accessToken}`,
    //       `--dir=${backportRepo}`,
    //       '--branch=production',
    //       '--pr=2',
    //       '--dry-run',
    //     ],
    //     { waitForString: 'Dry run complete', cwd: sourceRepo, showOra: true }
    //   );
    //   const { authorEmail, authorName } = await getCommitAuthor({
    //     cwd: backportRepo,
    //   });
    //   expect(authorName).toEqual('Sonny Long (demo)');
    //   expect(authorEmail).toEqual('71195571+sqren-demo@users.noreply.github.com');
    // });
    it('use commit author from git config in source repo', async () => {
        await (0, child_process_promisified_1.exec)(`git config user.name "Peter Kanin"`, { cwd: sourceRepo });
        await (0, child_process_promisified_1.exec)(`git config user.email "kanin@zoo.dk"`, { cwd: sourceRepo });
        await (0, runBackportViaCli_1.runBackportViaCli)([
            `--accessToken=${accessToken}`,
            `--dir=${backportRepo}`,
            '--branch=production',
            '--pr=2',
            '--dry-run',
        ], { cwd: sourceRepo, showOra: true });
        const { authorEmail, authorName } = await getCommitAuthor({
            cwd: backportRepo,
        });
        expect(authorName).toEqual('Peter Kanin');
        expect(authorEmail).toEqual('kanin@zoo.dk');
    });
    it('use commit author from cli args', async () => {
        await (0, runBackportViaCli_1.runBackportViaCli)([
            `--accessToken=${accessToken}`,
            `--dir=${backportRepo}`,
            '--branch=production',
            '--pr=2',
            '--dry-run',
            '--gitAuthorName="Donald Duck"',
            '--gitAuthorEmail=duck@disney.com',
        ], { cwd: sourceRepo, showOra: true });
        const { authorEmail, authorName } = await getCommitAuthor({
            cwd: backportRepo,
        });
        expect(authorName).toEqual('Donald Duck');
        expect(authorEmail).toEqual('duck@disney.com');
    });
    it('use resetAuthor option to set current user as author of commit', async () => {
        await (0, runBackportViaCli_1.runBackportViaCli)([
            `--accessToken=${accessToken}`,
            `--dir=${backportRepo}`,
            '--branch=production',
            '--pr=2',
            '--dry-run',
            '--reset-author',
        ], { cwd: sourceRepo, showOra: true });
        const { authorEmail, authorName } = await getCommitAuthor({
            cwd: backportRepo,
        });
        expect(authorName).toEqual('sqren');
        expect(authorEmail).toEqual('sqren@users.noreply.github.com');
    });
});
async function getCommitAuthor({ cwd }) {
    const { stdout: authorName } = await (0, child_process_promisified_1.exec)('git --no-pager log -1 --format=format:"%cn"', { cwd });
    const { stdout: authorEmail } = await (0, child_process_promisified_1.exec)('git --no-pager log -1 --format=format:"%ce"', { cwd });
    return { authorName, authorEmail };
}
