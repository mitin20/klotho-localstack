"use strict";
/*
 * This file is included in `setupFiles` in jest.config.js
 * It will be run once per test file
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const packageVersionModule = __importStar(require("../../utils/packageVersion"));
const mocks_1 = require("../mocks");
/* eslint-disable @typescript-eslint/no-empty-function */
jest.mock('find-up', () => {
    return jest.fn(async () => '/path/to/project/config');
});
// @ts-expect-error
// eslint-disable-next-line no-import-assign
packageVersionModule.UNMOCKED_PACKAGE_VERSION =
    packageVersionModule.PACKAGE_VERSION;
// @ts-expect-error
// eslint-disable-next-line no-import-assign
packageVersionModule.PACKAGE_VERSION = '1.2.3-mocked';
jest.mock('make-dir', () => {
    return jest.fn(() => Promise.resolve('/some/path'));
});
jest.mock('del', () => {
    return jest.fn(async (path) => `Attempted to delete ${path}`);
});
(0, mocks_1.mockOra)();
jest.mock('../../lib/logger', () => {
    const spy = jest.fn();
    const logger = {
        spy: spy,
        info: (msg, meta) => spy(`[INFO] ${msg}`, meta),
        verbose: (msg, meta) => spy(`[VERBOSE] ${msg}`, meta),
        warn: (msg, meta) => spy(`[WARN] ${msg}`, meta),
        error: (msg, meta) => spy(`[ERROR] ${msg}`, meta),
        debug: (msg, meta) => spy(`[DEBUG] ${msg}`, meta),
    };
    return {
        initLogger: jest.fn(() => logger),
        redactAccessToken: jest.fn((str) => str),
        consoleLog: jest.fn(),
        setAccessToken: jest.fn(),
        logger,
    };
});
