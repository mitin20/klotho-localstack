"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__exportStar(require("./accountSettingDefault"), exports);
__exportStar(require("./capacityProvider"), exports);
__exportStar(require("./cluster"), exports);
__exportStar(require("./clusterCapacityProviders"), exports);
__exportStar(require("./container"), exports);
__exportStar(require("./getCluster"), exports);
__exportStar(require("./getContainerDefinition"), exports);
__exportStar(require("./getService"), exports);
__exportStar(require("./getTaskDefinition"), exports);
__exportStar(require("./service"), exports);
__exportStar(require("./tag"), exports);
__exportStar(require("./taskDefinition"), exports);
__exportStar(require("./taskSet"), exports);
// Import resources to register:
const accountSettingDefault_1 = require("./accountSettingDefault");
const capacityProvider_1 = require("./capacityProvider");
const cluster_1 = require("./cluster");
const clusterCapacityProviders_1 = require("./clusterCapacityProviders");
const service_1 = require("./service");
const tag_1 = require("./tag");
const taskDefinition_1 = require("./taskDefinition");
const taskSet_1 = require("./taskSet");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "aws:ecs/accountSettingDefault:AccountSettingDefault":
                return new accountSettingDefault_1.AccountSettingDefault(name, undefined, { urn });
            case "aws:ecs/capacityProvider:CapacityProvider":
                return new capacityProvider_1.CapacityProvider(name, undefined, { urn });
            case "aws:ecs/cluster:Cluster":
                return new cluster_1.Cluster(name, undefined, { urn });
            case "aws:ecs/clusterCapacityProviders:ClusterCapacityProviders":
                return new clusterCapacityProviders_1.ClusterCapacityProviders(name, undefined, { urn });
            case "aws:ecs/service:Service":
                return new service_1.Service(name, undefined, { urn });
            case "aws:ecs/tag:Tag":
                return new tag_1.Tag(name, undefined, { urn });
            case "aws:ecs/taskDefinition:TaskDefinition":
                return new taskDefinition_1.TaskDefinition(name, undefined, { urn });
            case "aws:ecs/taskSet:TaskSet":
                return new taskSet_1.TaskSet(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "ecs/accountSettingDefault", _module);
pulumi.runtime.registerResourceModule("aws", "ecs/capacityProvider", _module);
pulumi.runtime.registerResourceModule("aws", "ecs/cluster", _module);
pulumi.runtime.registerResourceModule("aws", "ecs/clusterCapacityProviders", _module);
pulumi.runtime.registerResourceModule("aws", "ecs/service", _module);
pulumi.runtime.registerResourceModule("aws", "ecs/tag", _module);
pulumi.runtime.registerResourceModule("aws", "ecs/taskDefinition", _module);
pulumi.runtime.registerResourceModule("aws", "ecs/taskSet", _module);
//# sourceMappingURL=index.js.map