"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__exportStar(require("./authorizer"), exports);
__exportStar(require("./certificate"), exports);
__exportStar(require("./getEndpoint"), exports);
__exportStar(require("./indexingConfiguration"), exports);
__exportStar(require("./loggingOptions"), exports);
__exportStar(require("./policy"), exports);
__exportStar(require("./policyAttachment"), exports);
__exportStar(require("./provisioningTemplate"), exports);
__exportStar(require("./roleAlias"), exports);
__exportStar(require("./thing"), exports);
__exportStar(require("./thingGroup"), exports);
__exportStar(require("./thingGroupMembership"), exports);
__exportStar(require("./thingPrincipalAttachment"), exports);
__exportStar(require("./thingType"), exports);
__exportStar(require("./topicRule"), exports);
__exportStar(require("./topicRuleDestination"), exports);
// Import resources to register:
const authorizer_1 = require("./authorizer");
const certificate_1 = require("./certificate");
const indexingConfiguration_1 = require("./indexingConfiguration");
const loggingOptions_1 = require("./loggingOptions");
const policy_1 = require("./policy");
const policyAttachment_1 = require("./policyAttachment");
const provisioningTemplate_1 = require("./provisioningTemplate");
const roleAlias_1 = require("./roleAlias");
const thing_1 = require("./thing");
const thingGroup_1 = require("./thingGroup");
const thingGroupMembership_1 = require("./thingGroupMembership");
const thingPrincipalAttachment_1 = require("./thingPrincipalAttachment");
const thingType_1 = require("./thingType");
const topicRule_1 = require("./topicRule");
const topicRuleDestination_1 = require("./topicRuleDestination");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "aws:iot/authorizer:Authorizer":
                return new authorizer_1.Authorizer(name, undefined, { urn });
            case "aws:iot/certificate:Certificate":
                return new certificate_1.Certificate(name, undefined, { urn });
            case "aws:iot/indexingConfiguration:IndexingConfiguration":
                return new indexingConfiguration_1.IndexingConfiguration(name, undefined, { urn });
            case "aws:iot/loggingOptions:LoggingOptions":
                return new loggingOptions_1.LoggingOptions(name, undefined, { urn });
            case "aws:iot/policy:Policy":
                return new policy_1.Policy(name, undefined, { urn });
            case "aws:iot/policyAttachment:PolicyAttachment":
                return new policyAttachment_1.PolicyAttachment(name, undefined, { urn });
            case "aws:iot/provisioningTemplate:ProvisioningTemplate":
                return new provisioningTemplate_1.ProvisioningTemplate(name, undefined, { urn });
            case "aws:iot/roleAlias:RoleAlias":
                return new roleAlias_1.RoleAlias(name, undefined, { urn });
            case "aws:iot/thing:Thing":
                return new thing_1.Thing(name, undefined, { urn });
            case "aws:iot/thingGroup:ThingGroup":
                return new thingGroup_1.ThingGroup(name, undefined, { urn });
            case "aws:iot/thingGroupMembership:ThingGroupMembership":
                return new thingGroupMembership_1.ThingGroupMembership(name, undefined, { urn });
            case "aws:iot/thingPrincipalAttachment:ThingPrincipalAttachment":
                return new thingPrincipalAttachment_1.ThingPrincipalAttachment(name, undefined, { urn });
            case "aws:iot/thingType:ThingType":
                return new thingType_1.ThingType(name, undefined, { urn });
            case "aws:iot/topicRule:TopicRule":
                return new topicRule_1.TopicRule(name, undefined, { urn });
            case "aws:iot/topicRuleDestination:TopicRuleDestination":
                return new topicRuleDestination_1.TopicRuleDestination(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "iot/authorizer", _module);
pulumi.runtime.registerResourceModule("aws", "iot/certificate", _module);
pulumi.runtime.registerResourceModule("aws", "iot/indexingConfiguration", _module);
pulumi.runtime.registerResourceModule("aws", "iot/loggingOptions", _module);
pulumi.runtime.registerResourceModule("aws", "iot/policy", _module);
pulumi.runtime.registerResourceModule("aws", "iot/policyAttachment", _module);
pulumi.runtime.registerResourceModule("aws", "iot/provisioningTemplate", _module);
pulumi.runtime.registerResourceModule("aws", "iot/roleAlias", _module);
pulumi.runtime.registerResourceModule("aws", "iot/thing", _module);
pulumi.runtime.registerResourceModule("aws", "iot/thingGroup", _module);
pulumi.runtime.registerResourceModule("aws", "iot/thingGroupMembership", _module);
pulumi.runtime.registerResourceModule("aws", "iot/thingPrincipalAttachment", _module);
pulumi.runtime.registerResourceModule("aws", "iot/thingType", _module);
pulumi.runtime.registerResourceModule("aws", "iot/topicRule", _module);
pulumi.runtime.registerResourceModule("aws", "iot/topicRuleDestination", _module);
//# sourceMappingURL=index.js.map