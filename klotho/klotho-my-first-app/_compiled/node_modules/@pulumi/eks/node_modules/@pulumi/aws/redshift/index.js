"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__exportStar(require("./authenticationProfile"), exports);
__exportStar(require("./cluster"), exports);
__exportStar(require("./clusterIamRoles"), exports);
__exportStar(require("./endpointAccess"), exports);
__exportStar(require("./eventSubscription"), exports);
__exportStar(require("./getCluster"), exports);
__exportStar(require("./getClusterCredentials"), exports);
__exportStar(require("./getOrderableCluster"), exports);
__exportStar(require("./getServiceAccount"), exports);
__exportStar(require("./getSubnetGroup"), exports);
__exportStar(require("./hsmClientCertificate"), exports);
__exportStar(require("./hsmConfiguration"), exports);
__exportStar(require("./parameterGroup"), exports);
__exportStar(require("./scheduledAction"), exports);
__exportStar(require("./securityGroup"), exports);
__exportStar(require("./snapshotCopyGrant"), exports);
__exportStar(require("./snapshotSchedule"), exports);
__exportStar(require("./snapshotScheduleAssociation"), exports);
__exportStar(require("./subnetGroup"), exports);
__exportStar(require("./usageLimit"), exports);
// Import resources to register:
const authenticationProfile_1 = require("./authenticationProfile");
const cluster_1 = require("./cluster");
const clusterIamRoles_1 = require("./clusterIamRoles");
const endpointAccess_1 = require("./endpointAccess");
const eventSubscription_1 = require("./eventSubscription");
const hsmClientCertificate_1 = require("./hsmClientCertificate");
const hsmConfiguration_1 = require("./hsmConfiguration");
const parameterGroup_1 = require("./parameterGroup");
const scheduledAction_1 = require("./scheduledAction");
const securityGroup_1 = require("./securityGroup");
const snapshotCopyGrant_1 = require("./snapshotCopyGrant");
const snapshotSchedule_1 = require("./snapshotSchedule");
const snapshotScheduleAssociation_1 = require("./snapshotScheduleAssociation");
const subnetGroup_1 = require("./subnetGroup");
const usageLimit_1 = require("./usageLimit");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "aws:redshift/authenticationProfile:AuthenticationProfile":
                return new authenticationProfile_1.AuthenticationProfile(name, undefined, { urn });
            case "aws:redshift/cluster:Cluster":
                return new cluster_1.Cluster(name, undefined, { urn });
            case "aws:redshift/clusterIamRoles:ClusterIamRoles":
                return new clusterIamRoles_1.ClusterIamRoles(name, undefined, { urn });
            case "aws:redshift/endpointAccess:EndpointAccess":
                return new endpointAccess_1.EndpointAccess(name, undefined, { urn });
            case "aws:redshift/eventSubscription:EventSubscription":
                return new eventSubscription_1.EventSubscription(name, undefined, { urn });
            case "aws:redshift/hsmClientCertificate:HsmClientCertificate":
                return new hsmClientCertificate_1.HsmClientCertificate(name, undefined, { urn });
            case "aws:redshift/hsmConfiguration:HsmConfiguration":
                return new hsmConfiguration_1.HsmConfiguration(name, undefined, { urn });
            case "aws:redshift/parameterGroup:ParameterGroup":
                return new parameterGroup_1.ParameterGroup(name, undefined, { urn });
            case "aws:redshift/scheduledAction:ScheduledAction":
                return new scheduledAction_1.ScheduledAction(name, undefined, { urn });
            case "aws:redshift/securityGroup:SecurityGroup":
                return new securityGroup_1.SecurityGroup(name, undefined, { urn });
            case "aws:redshift/snapshotCopyGrant:SnapshotCopyGrant":
                return new snapshotCopyGrant_1.SnapshotCopyGrant(name, undefined, { urn });
            case "aws:redshift/snapshotSchedule:SnapshotSchedule":
                return new snapshotSchedule_1.SnapshotSchedule(name, undefined, { urn });
            case "aws:redshift/snapshotScheduleAssociation:SnapshotScheduleAssociation":
                return new snapshotScheduleAssociation_1.SnapshotScheduleAssociation(name, undefined, { urn });
            case "aws:redshift/subnetGroup:SubnetGroup":
                return new subnetGroup_1.SubnetGroup(name, undefined, { urn });
            case "aws:redshift/usageLimit:UsageLimit":
                return new usageLimit_1.UsageLimit(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "redshift/authenticationProfile", _module);
pulumi.runtime.registerResourceModule("aws", "redshift/cluster", _module);
pulumi.runtime.registerResourceModule("aws", "redshift/clusterIamRoles", _module);
pulumi.runtime.registerResourceModule("aws", "redshift/endpointAccess", _module);
pulumi.runtime.registerResourceModule("aws", "redshift/eventSubscription", _module);
pulumi.runtime.registerResourceModule("aws", "redshift/hsmClientCertificate", _module);
pulumi.runtime.registerResourceModule("aws", "redshift/hsmConfiguration", _module);
pulumi.runtime.registerResourceModule("aws", "redshift/parameterGroup", _module);
pulumi.runtime.registerResourceModule("aws", "redshift/scheduledAction", _module);
pulumi.runtime.registerResourceModule("aws", "redshift/securityGroup", _module);
pulumi.runtime.registerResourceModule("aws", "redshift/snapshotCopyGrant", _module);
pulumi.runtime.registerResourceModule("aws", "redshift/snapshotSchedule", _module);
pulumi.runtime.registerResourceModule("aws", "redshift/snapshotScheduleAssociation", _module);
pulumi.runtime.registerResourceModule("aws", "redshift/subnetGroup", _module);
pulumi.runtime.registerResourceModule("aws", "redshift/usageLimit", _module);
//# sourceMappingURL=index.js.map