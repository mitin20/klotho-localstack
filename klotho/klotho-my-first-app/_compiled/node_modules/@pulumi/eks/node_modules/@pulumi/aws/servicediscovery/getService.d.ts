import * as pulumi from "@pulumi/pulumi";
import { output as outputs } from "../types";
/**
 * Retrieves information about a Service Discovery Service.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const test = pulumi.output(aws.servicediscovery.getService({
 *     name: "example",
 *     namespaceId: "NAMESPACE_ID_VALUE",
 * }));
 * ```
 */
export declare function getService(args: GetServiceArgs, opts?: pulumi.InvokeOptions): Promise<GetServiceResult>;
/**
 * A collection of arguments for invoking getService.
 */
export interface GetServiceArgs {
    /**
     * The name of the service.
     */
    name: string;
    /**
     * The ID of the namespace that the service belongs to.
     */
    namespaceId: string;
    /**
     * A map of tags to assign to the service. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: {
        [key: string]: string;
    };
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     */
    tagsAll?: {
        [key: string]: string;
    };
}
/**
 * A collection of values returned by getService.
 */
export interface GetServiceResult {
    /**
     * The ARN of the service.
     */
    readonly arn: string;
    /**
     * The description of the service.
     */
    readonly description: string;
    /**
     * A complex type that contains information about the resource record sets that you want Amazon Route 53 to create when you register an instance.
     */
    readonly dnsConfigs: outputs.servicediscovery.GetServiceDnsConfig[];
    /**
     * A complex type that contains settings for an optional health check. Only for Public DNS namespaces.
     */
    readonly healthCheckConfigs: outputs.servicediscovery.GetServiceHealthCheckConfig[];
    /**
     * A complex type that contains settings for ECS managed health checks.
     */
    readonly healthCheckCustomConfigs: outputs.servicediscovery.GetServiceHealthCheckCustomConfig[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly name: string;
    /**
     * The ID of the namespace to use for DNS configuration.
     */
    readonly namespaceId: string;
    /**
     * A map of tags to assign to the service. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    readonly tags?: {
        [key: string]: string;
    };
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     */
    readonly tagsAll: {
        [key: string]: string;
    };
}
export declare function getServiceOutput(args: GetServiceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetServiceResult>;
/**
 * A collection of arguments for invoking getService.
 */
export interface GetServiceOutputArgs {
    /**
     * The name of the service.
     */
    name: pulumi.Input<string>;
    /**
     * The ID of the namespace that the service belongs to.
     */
    namespaceId: pulumi.Input<string>;
    /**
     * A map of tags to assign to the service. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     */
    tagsAll?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
}
