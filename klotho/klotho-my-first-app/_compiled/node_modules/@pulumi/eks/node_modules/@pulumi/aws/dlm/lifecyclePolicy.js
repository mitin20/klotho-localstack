"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.LifecyclePolicy = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a [Data Lifecycle Manager (DLM) lifecycle policy](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshot-lifecycle.html) for managing snapshots.
 *
 * ## Example Usage
 * ### Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const dlmLifecycleRole = new aws.iam.Role("dlmLifecycleRole", {assumeRolePolicy: `{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {
 *       "Action": "sts:AssumeRole",
 *       "Principal": {
 *         "Service": "dlm.amazonaws.com"
 *       },
 *       "Effect": "Allow",
 *       "Sid": ""
 *     }
 *   ]
 * }
 * `});
 * const dlmLifecycle = new aws.iam.RolePolicy("dlmLifecycle", {
 *     role: dlmLifecycleRole.id,
 *     policy: `{
 *    "Version": "2012-10-17",
 *    "Statement": [
 *       {
 *          "Effect": "Allow",
 *          "Action": [
 *             "ec2:CreateSnapshot",
 *             "ec2:CreateSnapshots",
 *             "ec2:DeleteSnapshot",
 *             "ec2:DescribeInstances",
 *             "ec2:DescribeVolumes",
 *             "ec2:DescribeSnapshots"
 *          ],
 *          "Resource": "*"
 *       },
 *       {
 *          "Effect": "Allow",
 *          "Action": [
 *             "ec2:CreateTags"
 *          ],
 *          "Resource": "arn:aws:ec2:*::snapshot/*"
 *       }
 *    ]
 * }
 * `,
 * });
 * const example = new aws.dlm.LifecyclePolicy("example", {
 *     description: "example DLM lifecycle policy",
 *     executionRoleArn: dlmLifecycleRole.arn,
 *     state: "ENABLED",
 *     policyDetails: {
 *         resourceTypes: ["VOLUME"],
 *         schedules: [{
 *             name: "2 weeks of daily snapshots",
 *             createRule: {
 *                 interval: 24,
 *                 intervalUnit: "HOURS",
 *                 times: ["23:45"],
 *             },
 *             retainRule: {
 *                 count: 14,
 *             },
 *             tagsToAdd: {
 *                 SnapshotCreator: "DLM",
 *             },
 *             copyTags: false,
 *         }],
 *         targetTags: {
 *             Snapshot: "true",
 *         },
 *     },
 * });
 * ```
 * ### Example Cross-Region Snapshot Copy Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const current = aws.getCallerIdentity({});
 * const dlmCrossRegionCopyCmk = new aws.kms.Key("dlmCrossRegionCopyCmk", {
 *     description: "Example Alternate Region KMS Key",
 *     policy: current.then(current => `{
 *   "Version": "2012-10-17",
 *   "Id": "dlm-cross-region-copy-cmk",
 *   "Statement": [
 *     {
 *       "Sid": "Enable IAM User Permissions",
 *       "Effect": "Allow",
 *       "Principal": {
 *         "AWS": "arn:aws:iam::${current.accountId}:root"
 *       },
 *       "Action": "kms:*",
 *       "Resource": "*"
 *     }
 *   ]
 * }
 * `),
 * }, {
 *     provider: aws.alternate,
 * });
 * const example = new aws.dlm.LifecyclePolicy("example", {
 *     description: "example DLM lifecycle policy",
 *     executionRoleArn: aws_iam_role.dlm_lifecycle_role.arn,
 *     state: "ENABLED",
 *     policyDetails: {
 *         resourceTypes: ["VOLUME"],
 *         schedules: [{
 *             name: "2 weeks of daily snapshots",
 *             createRule: {
 *                 interval: 24,
 *                 intervalUnit: "HOURS",
 *                 times: ["23:45"],
 *             },
 *             retainRule: {
 *                 count: 14,
 *             },
 *             tagsToAdd: {
 *                 SnapshotCreator: "DLM",
 *             },
 *             copyTags: false,
 *             crossRegionCopyRules: [{
 *                 target: "us-west-2",
 *                 encrypted: true,
 *                 cmkArn: dlmCrossRegionCopyCmk.arn,
 *                 copyTags: true,
 *                 retainRule: {
 *                     interval: 30,
 *                     intervalUnit: "DAYS",
 *                 },
 *             }],
 *         }],
 *         targetTags: {
 *             Snapshot: "true",
 *         },
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * DLM lifecycle policies can be imported by their policy ID
 *
 * ```sh
 *  $ pulumi import aws:dlm/lifecyclePolicy:LifecyclePolicy example policy-abcdef12345678901
 * ```
 */
class LifecyclePolicy extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["executionRoleArn"] = state ? state.executionRoleArn : undefined;
            resourceInputs["policyDetails"] = state ? state.policyDetails : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.executionRoleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'executionRoleArn'");
            }
            if ((!args || args.policyDetails === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyDetails'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["executionRoleArn"] = args ? args.executionRoleArn : undefined;
            resourceInputs["policyDetails"] = args ? args.policyDetails : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LifecyclePolicy.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing LifecyclePolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new LifecyclePolicy(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of LifecyclePolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LifecyclePolicy.__pulumiType;
    }
}
exports.LifecyclePolicy = LifecyclePolicy;
/** @internal */
LifecyclePolicy.__pulumiType = 'aws:dlm/lifecyclePolicy:LifecyclePolicy';
//# sourceMappingURL=lifecyclePolicy.js.map