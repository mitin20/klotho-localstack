"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.findApiObjectDefinitions = exports.ImportKubernetesApi = exports.DEFAULT_API_VERSION = void 0;
const json2jsii_1 = require("json2jsii");
const base_1 = require("./base");
const codegen_1 = require("./codegen");
const k8s_util_1 = require("./k8s-util");
const util_1 = require("../util");
exports.DEFAULT_API_VERSION = '1.25.0';
const DEFAULT_CLASS_NAME_PREFIX = 'Kube';
class ImportKubernetesApi extends base_1.ImportBase {
    static async match(importSpec, argv) {
        var _a;
        const { source } = importSpec;
        if (source !== 'k8s' && !source.startsWith('k8s@')) {
            return undefined;
        }
        let k8sVersion = (_a = source.split('@')[1]) !== null && _a !== void 0 ? _a : exports.DEFAULT_API_VERSION;
        const k8sVersionRegex = /^\d+\.\d+\.\d+$/;
        if (!k8sVersionRegex.test(k8sVersion)) {
            throw new Error(`Expected k8s version "${k8sVersion}" to match format "<major>.<minor>.<patch>".`);
        }
        console.error(`Importing k8s v${k8sVersion}...`);
        return {
            apiVersion: k8sVersion,
            exclude: argv.exclude,
        };
    }
    constructor(options) {
        super();
        this.options = options;
    }
    get moduleNames() {
        return ['k8s'];
    }
    async generateTypeScript(code, moduleName, options) {
        var _a;
        const schema = await downloadSchema(this.options.apiVersion);
        if (moduleName !== 'k8s') {
            throw new Error(`unexpected module name "${moduleName}" when importing k8s types (expected "k8s")`);
        }
        const prefix = (_a = options.classNamePrefix) !== null && _a !== void 0 ? _a : DEFAULT_CLASS_NAME_PREFIX;
        const topLevelObjects = findApiObjectDefinitions(schema, prefix);
        const typeGenerator = new json2jsii_1.TypeGenerator({
            definitions: schema.definitions,
            exclude: this.options.exclude,
            renderTypeName: (def) => {
                const parsed = (0, k8s_util_1.parseApiTypeName)(def);
                if (!parsed.version) {
                    // not a versioned api type. return basename
                    return parsed.basename;
                }
                return (0, codegen_1.getTypeName)(false, parsed.basename, parsed.version.raw);
            },
        });
        // rename "Props" type from their original name based on the API object kind
        // (e.g. `Deployment`) to their actual props type (`KubeDeploymentProps`) in
        // order to avoid confusion between constructs (`KubeDeployment`) and those
        // types. This is done by simply replacing their definition in the schema
        // with a $ref to the definition of the props type.
        for (const o of topLevelObjects) {
            typeGenerator.addDefinition(o.fqn, { $ref: `#/definitions/${(0, codegen_1.getPropsTypeName)(o)}` });
        }
        // emit construct types (recursive)
        for (const o of topLevelObjects) {
            (0, codegen_1.generateConstruct)(typeGenerator, o);
        }
        (0, codegen_1.emitHeader)(code, false);
        code.line(typeGenerator.render());
    }
}
exports.ImportKubernetesApi = ImportKubernetesApi;
/**
 * Returns a map of all API objects in the spec (objects that have the
 * 'x-kubernetes-group-version-kind' annotation).
 *
 * The key is the base name of the type (i.e. `Deployment`). Since API objects
 * may have multiple versions, each value in the map is an array of type definitions
 * along with version information.
 *
 * @see https://kubernetes.io/docs/concepts/overview/kubernetes-api/#api-versioning
 */
function findApiObjectDefinitions(schema, prefix) {
    const result = new Array();
    for (const [typename, apischema] of Object.entries(schema.definitions || {})) {
        const objectName = tryGetObjectName(apischema);
        if (!objectName) {
            continue;
        }
        const type = (0, k8s_util_1.parseApiTypeName)(typename);
        if (!type.version) {
            throw new Error(`Unable to parse version for type: ${typename}`);
        }
        result.push({
            custom: false,
            fqn: type.fullname,
            group: objectName.group,
            kind: objectName.kind,
            version: objectName.version,
            schema: apischema,
            prefix,
        });
    }
    return result;
}
exports.findApiObjectDefinitions = findApiObjectDefinitions;
function tryGetObjectName(def) {
    var _a;
    const objectNames = def[X_GROUP_VERSION_KIND];
    if (!objectNames) {
        return undefined;
    }
    const objectName = objectNames[0];
    if (!objectName) {
        return undefined;
    }
    // skip definitions without "metadata". they are not API objects that can be defined
    // in manifests (example: io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions)
    // they will be treated as data types
    if (!((_a = def.properties) === null || _a === void 0 ? void 0 : _a.metadata)) {
        return undefined;
    }
    return objectName;
}
const X_GROUP_VERSION_KIND = 'x-kubernetes-group-version-kind';
async function downloadSchema(apiVersion) {
    const url = `https://raw.githubusercontent.com/cdk8s-team/cdk8s/master/kubernetes-schemas/v${apiVersion}/_definitions.json`;
    let output;
    try {
        output = await (0, util_1.download)(url);
    }
    catch (e) {
        console.error(`Could not find a schema for k8s version ${apiVersion}. The current list of available schemas is at https://github.com/cdk8s-team/cdk8s/tree/master/kubernetes-schemas.`);
        throw e;
    }
    try {
        return (0, k8s_util_1.safeParseJsonSchema)(output);
    }
    catch (e) {
        throw new Error(`Unable to parse schema at ${url}: ${e}`);
    }
}
//# sourceMappingURL=data:application/json;base64,