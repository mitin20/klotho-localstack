"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.importDispatch = void 0;
const crd_1 = require("./crd");
const crds_dev_1 = require("./crds-dev");
const k8s_1 = require("./k8s");
async function importDispatch(imports, argv, options) {
    for (const importSpec of imports) {
        const importer = await matchImporter(importSpec, argv);
        if (!importer) {
            throw new Error(`unable to determine import type for "${importSpec}"`);
        }
        console.error('Importing resources, this may take a few moments...');
        await importer.import({
            moduleNamePrefix: importSpec.moduleNamePrefix,
            ...options,
        });
    }
}
exports.importDispatch = importDispatch;
async function matchImporter(importSpec, argv) {
    // first check if its a `k8s@` import
    const k8s = await k8s_1.ImportKubernetesApi.match(importSpec, argv);
    if (k8s) {
        return new k8s_1.ImportKubernetesApi(k8s);
    }
    // now check if its a crds.dev import
    const crdsDevUrl = (0, crds_dev_1.matchCrdsDevUrl)(importSpec.source);
    if (crdsDevUrl) {
        return crd_1.ImportCustomResourceDefinition.fromSpec({ source: crdsDevUrl, moduleNamePrefix: importSpec.moduleNamePrefix });
    }
    // default to a normal CRD
    return crd_1.ImportCustomResourceDefinition.fromSpec(importSpec);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlzcGF0Y2guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaW1wb3J0L2Rpc3BhdGNoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLCtCQUF1RDtBQUN2RCx5Q0FBNkM7QUFDN0MsK0JBQTRDO0FBR3JDLEtBQUssVUFBVSxjQUFjLENBQUMsT0FBcUIsRUFBRSxJQUFTLEVBQUUsT0FBc0I7SUFDM0YsS0FBSyxNQUFNLFVBQVUsSUFBSSxPQUFPLEVBQUU7UUFDaEMsTUFBTSxRQUFRLEdBQUcsTUFBTSxhQUFhLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBRXZELElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDYixNQUFNLElBQUksS0FBSyxDQUFDLHdDQUF3QyxVQUFVLEdBQUcsQ0FBQyxDQUFDO1NBQ3hFO1FBRUQsT0FBTyxDQUFDLEtBQUssQ0FBQyxxREFBcUQsQ0FBQyxDQUFDO1FBRXJFLE1BQU0sUUFBUSxDQUFDLE1BQU0sQ0FBQztZQUNwQixnQkFBZ0IsRUFBRSxVQUFVLENBQUMsZ0JBQWdCO1lBQzdDLEdBQUcsT0FBTztTQUNYLENBQUMsQ0FBQztLQUNKO0FBQ0gsQ0FBQztBQWZELHdDQWVDO0FBRUQsS0FBSyxVQUFVLGFBQWEsQ0FBQyxVQUFzQixFQUFFLElBQVM7SUFFNUQscUNBQXFDO0lBQ3JDLE1BQU0sR0FBRyxHQUFHLE1BQU0seUJBQW1CLENBQUMsS0FBSyxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM5RCxJQUFJLEdBQUcsRUFBRTtRQUNQLE9BQU8sSUFBSSx5QkFBbUIsQ0FBQyxHQUFHLENBQUMsQ0FBQztLQUNyQztJQUVELHFDQUFxQztJQUNyQyxNQUFNLFVBQVUsR0FBRyxJQUFBLDBCQUFlLEVBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3RELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxvQ0FBOEIsQ0FBQyxRQUFRLENBQUMsRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLGdCQUFnQixFQUFFLFVBQVUsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLENBQUM7S0FDdkg7SUFFRCwwQkFBMEI7SUFDMUIsT0FBTyxvQ0FBOEIsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDN0QsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEltcG9ydEJhc2UsIEltcG9ydE9wdGlvbnMgfSBmcm9tICcuL2Jhc2UnO1xuaW1wb3J0IHsgSW1wb3J0Q3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIH0gZnJvbSAnLi9jcmQnO1xuaW1wb3J0IHsgbWF0Y2hDcmRzRGV2VXJsIH0gZnJvbSAnLi9jcmRzLWRldic7XG5pbXBvcnQgeyBJbXBvcnRLdWJlcm5ldGVzQXBpIH0gZnJvbSAnLi9rOHMnO1xuaW1wb3J0IHsgSW1wb3J0U3BlYyB9IGZyb20gJy4uL2NvbmZpZyc7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBpbXBvcnREaXNwYXRjaChpbXBvcnRzOiBJbXBvcnRTcGVjW10sIGFyZ3Y6IGFueSwgb3B0aW9uczogSW1wb3J0T3B0aW9ucykge1xuICBmb3IgKGNvbnN0IGltcG9ydFNwZWMgb2YgaW1wb3J0cykge1xuICAgIGNvbnN0IGltcG9ydGVyID0gYXdhaXQgbWF0Y2hJbXBvcnRlcihpbXBvcnRTcGVjLCBhcmd2KTtcblxuICAgIGlmICghaW1wb3J0ZXIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgdW5hYmxlIHRvIGRldGVybWluZSBpbXBvcnQgdHlwZSBmb3IgXCIke2ltcG9ydFNwZWN9XCJgKTtcbiAgICB9XG5cbiAgICBjb25zb2xlLmVycm9yKCdJbXBvcnRpbmcgcmVzb3VyY2VzLCB0aGlzIG1heSB0YWtlIGEgZmV3IG1vbWVudHMuLi4nKTtcblxuICAgIGF3YWl0IGltcG9ydGVyLmltcG9ydCh7XG4gICAgICBtb2R1bGVOYW1lUHJlZml4OiBpbXBvcnRTcGVjLm1vZHVsZU5hbWVQcmVmaXgsXG4gICAgICAuLi5vcHRpb25zLFxuICAgIH0pO1xuICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIG1hdGNoSW1wb3J0ZXIoaW1wb3J0U3BlYzogSW1wb3J0U3BlYywgYXJndjogYW55KTogUHJvbWlzZTxJbXBvcnRCYXNlPiB7XG5cbiAgLy8gZmlyc3QgY2hlY2sgaWYgaXRzIGEgYGs4c0BgIGltcG9ydFxuICBjb25zdCBrOHMgPSBhd2FpdCBJbXBvcnRLdWJlcm5ldGVzQXBpLm1hdGNoKGltcG9ydFNwZWMsIGFyZ3YpO1xuICBpZiAoazhzKSB7XG4gICAgcmV0dXJuIG5ldyBJbXBvcnRLdWJlcm5ldGVzQXBpKGs4cyk7XG4gIH1cblxuICAvLyBub3cgY2hlY2sgaWYgaXRzIGEgY3Jkcy5kZXYgaW1wb3J0XG4gIGNvbnN0IGNyZHNEZXZVcmwgPSBtYXRjaENyZHNEZXZVcmwoaW1wb3J0U3BlYy5zb3VyY2UpO1xuICBpZiAoY3Jkc0RldlVybCkge1xuICAgIHJldHVybiBJbXBvcnRDdXN0b21SZXNvdXJjZURlZmluaXRpb24uZnJvbVNwZWMoeyBzb3VyY2U6IGNyZHNEZXZVcmwsIG1vZHVsZU5hbWVQcmVmaXg6IGltcG9ydFNwZWMubW9kdWxlTmFtZVByZWZpeCB9KTtcbiAgfVxuXG4gIC8vIGRlZmF1bHQgdG8gYSBub3JtYWwgQ1JEXG4gIHJldHVybiBJbXBvcnRDdXN0b21SZXNvdXJjZURlZmluaXRpb24uZnJvbVNwZWMoaW1wb3J0U3BlYyk7XG59XG4iXX0=