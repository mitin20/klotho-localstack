"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = __importStar(require("fs"));
const yaml = __importStar(require("yaml"));
const config_1 = require("../../config");
const _manager_1 = require("../../plugins/_manager");
const util_1 = require("../../util");
const config = (0, config_1.readConfigSync)();
class Command {
    constructor() {
        this.command = 'synth';
        this.describe = 'Synthesizes Kubernetes manifests for all charts in your app.';
        this.aliases = ['synthesize'];
        this.builder = (args) => args
            .option('app', { default: config.app, required: true, desc: 'Command to use in order to execute cdk8s app', alias: 'a' })
            .option('output', { default: config.output, required: false, desc: 'Output directory', alias: 'o' })
            .option('stdout', { type: 'boolean', required: false, desc: 'Write synthesized manifests to STDOUT instead of the output directory', alias: 'p' })
            .option('plugins-dir', { default: config.pluginsDirectory, required: false, desc: 'Directory to store cdk8s plugins.' })
            .option('validate', { type: 'boolean', default: true, required: false, desc: 'Apply validation plugins on the resulting manifests (use --no-validate to disable)' })
            .option('validation-reports-output-file', { required: false, desc: 'File to write a JSON representation of the validation reports to' });
    }
    ;
    async handler(argv) {
        const command = argv.app;
        const outdir = argv.output;
        const stdout = argv.stdout;
        const validate = argv.validate;
        const pluginsDir = argv.pluginsDir;
        const reportFile = argv.validationReportsOutputFile;
        if (outdir && outdir !== config.output && stdout) {
            throw new Error('\'--output\' and \'--stdout\' are mutually exclusive. Please only use one.');
        }
        if (outdir) {
            fs.rmSync(outdir, { recursive: true, force: true });
        }
        const validations = validate ? await fetchValidations() : undefined;
        const recordConstructMetadata = !(validations == undefined || validations.length == 0);
        if (stdout) {
            await (0, util_1.mkdtemp)(async (tempDir) => {
                const app = await (0, util_1.synthApp)(command, tempDir, stdout, recordConstructMetadata);
                for (const f of app.manifests) {
                    fs.createReadStream(f).pipe(process.stdout);
                }
                if (validations) {
                    const pluginManager = new _manager_1.PluginManager(pluginsDir);
                    await (0, util_1.validateApp)(app, stdout, validations, pluginManager, reportFile);
                }
            });
        }
        else {
            const manifests = await (0, util_1.synthApp)(command, outdir, stdout, recordConstructMetadata);
            if (validations) {
                const pluginManager = new _manager_1.PluginManager(pluginsDir);
                await (0, util_1.validateApp)(manifests, stdout, validations, pluginManager, reportFile);
            }
        }
    }
}
async function fetchValidations() {
    if (typeof (config.validations) === 'string') {
        const content = await (0, util_1.download)(config.validations);
        return yaml.parse(content);
    }
    else {
        return config.validations;
    }
}
module.exports = new Command();
//# sourceMappingURL=data:application/json;base64,