"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateConstruct = exports.getPropsTypeName = exports.getConstructTypeName = exports.getTypeName = exports.emitHeader = void 0;
const codemaker_1 = require("codemaker");
const json2jsii_1 = require("json2jsii");
const MANIFEST_STATIC_METHOD = 'manifest';
const GVK_STATIC = 'GVK';
/**
 * Emits the header for a generated imports file.
 *
 * @param custom - whether the header is being emitted for a custom resource
 * (imported from a CRD) or a core API object
 */
function emitHeader(code, custom) {
    code.line('// generated by cdk8s');
    if (custom) {
        code.line('import { ApiObject, ApiObjectMetadata, GroupVersionKind } from \'cdk8s\';');
    }
    else {
        code.line('import { ApiObject, GroupVersionKind } from \'cdk8s\';');
    }
    code.line('import { Construct } from \'constructs\';');
    code.line();
}
exports.emitHeader = emitHeader;
function getTypeName(custom, kind, version) {
    // add an API version postfix only if this is core API (`import k8s`).
    // TODO = what about the rest of the namespace? the same resource can exist in multiple
    // api groups (Ingress for example exists in 'extensions' and 'networking')
    const postfix = (custom || version === 'v1') ? '' : (0, codemaker_1.toPascalCase)(version);
    return `${kind}${postfix}`;
}
exports.getTypeName = getTypeName;
function getConstructTypeName(def) {
    var _a, _b;
    const prefix = (_a = def.prefix) !== null && _a !== void 0 ? _a : '';
    const suffix = (_b = def.suffix) !== null && _b !== void 0 ? _b : '';
    return json2jsii_1.TypeGenerator.normalizeTypeName(`${prefix}${getTypeName(def.custom, def.kind, def.version)}${suffix}`);
}
exports.getConstructTypeName = getConstructTypeName;
function getPropsTypeName(def) {
    const constructName = getConstructTypeName(def);
    return json2jsii_1.TypeGenerator.normalizeTypeName(`${constructName}Props`);
}
exports.getPropsTypeName = getPropsTypeName;
function generateConstruct(typegen, def) {
    const constructName = getConstructTypeName(def);
    if (def.custom) {
        typegen.emitCustomType('ApiObjectMetadata', () => { });
    }
    typegen.emitCustomType(constructName, code => {
        const schema = def.schema;
        // `propsTypeName` could also be "any" if we can't parse the schema for some reason
        const propsTypeName = emitPropsStruct();
        const groupPrefix = def.group ? `${def.group}/` : '';
        const hasRequired = (schema === null || schema === void 0 ? void 0 : schema.required) && Array.isArray(schema.required) && schema.required.length > 0;
        const defaultProps = hasRequired ? '' : ' = {}';
        emitConstruct();
        function emitPropsStruct() {
            const propsSchema = createPropsStructSchema();
            const propsStructName = getPropsTypeName(def);
            return typegen.emitType(propsStructName, propsSchema, def.fqn);
        }
        function createPropsStructSchema() {
            const copy = { ...def.schema || {} };
            const props = copy.properties = copy.properties || {};
            delete props.apiVersion;
            delete props.kind;
            delete props.status;
            delete copy['x-kubernetes-group-version-kind'];
            copy.required = copy.required || [];
            if (Array.isArray(copy.required)) {
                copy.required = copy.required.filter(x => x !== 'apiVersion' && x !== 'kind' && x !== 'status');
            }
            if (def.custom) {
                // add "metadata" field for all CRDs, overriding any existing typings
                copy.properties.metadata = { $ref: '#/definitions/ApiObjectMetadata' };
            }
            // reorder top-level keys so that we have "metadata" first and then all the rest
            // This matches the behavior in the ApiObject's toJson function (https://github.com/cdk8s-team/cdk8s-core/blob/58fb8c0882ddd95a9b9dedb4107e12f601443cf4/src/api-object.ts#L185)
            const result = {};
            for (const k of ['metadata', ...Object.keys(copy.properties)]) {
                if (k in copy.properties) {
                    result[k] = copy.properties[k];
                }
            }
            copy.properties = result;
            return copy;
        }
        function emitConstruct() {
            var _a, _b;
            code.line('/**');
            code.line(` * ${(_b = (_a = def.schema) === null || _a === void 0 ? void 0 : _a.description) !== null && _b !== void 0 ? _b : ''}`);
            code.line(' *');
            code.line(` * @schema ${def.fqn}`);
            code.line(' */');
            code.openBlock(`export class ${constructName} extends ApiObject`);
            emitGVK();
            code.line('');
            emitManifestFactory();
            code.line('');
            emitInitializer();
            code.line('');
            emitToJson();
            code.closeBlock();
        }
        function emitGVK() {
            code.line('/**');
            code.line(` * Returns the apiVersion and kind for "${def.fqn}"`);
            code.line(' */');
            code.openBlock(`public static readonly ${GVK_STATIC}: GroupVersionKind =`);
            code.line(`apiVersion: '${groupPrefix}${def.version}',`);
            code.line(`kind: '${def.kind}',`);
            code.closeBlock();
        }
        function emitInitializer() {
            code.line('/**');
            code.line(` * Defines a "${def.fqn}" API object`);
            code.line(' * @param scope the scope in which to define this object');
            code.line(' * @param id a scope-local name for the object');
            code.line(' * @param props initialization props');
            code.line(' */');
            code.openBlock(`public constructor(scope: Construct, id: string, props: ${propsTypeName}${defaultProps})`);
            code.open('super(scope, id, {');
            code.line(`...${constructName}.${GVK_STATIC},`);
            code.line('...props,');
            code.close('});');
            code.closeBlock();
        }
        function emitManifestFactory() {
            code.line('/**');
            code.line(` * Renders a Kubernetes manifest for "${def.fqn}".`);
            code.line(' *');
            code.line(' * This can be used to inline resource manifests inside other objects (e.g. as templates).');
            code.line(' *');
            code.line(' * @param props initialization props');
            code.line(' */');
            code.openBlock(`public static ${MANIFEST_STATIC_METHOD}(props: ${propsTypeName}${defaultProps}): any`);
            code.open('return {');
            code.line(`...${constructName}.${GVK_STATIC},`);
            code.line(`...toJson_${propsTypeName}(props),`);
            code.close('};');
            code.closeBlock();
        }
        function emitToJson() {
            code.line('/**');
            code.line(' * Renders the object to Kubernetes JSON.');
            code.line(' */');
            code.openBlock('public toJson(): any');
            code.line('const resolved = super.toJson();');
            code.line();
            code.open('return {');
            code.line(`...${constructName}.${GVK_STATIC},`);
            code.line(`...toJson_${propsTypeName}(resolved),`);
            code.close('};');
            code.closeBlock();
        }
    });
}
exports.generateConstruct = generateConstruct;
//# sourceMappingURL=data:application/json;base64,