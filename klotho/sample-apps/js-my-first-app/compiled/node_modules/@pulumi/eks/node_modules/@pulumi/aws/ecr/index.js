"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__exportStar(require("./getAuthorizationToken"), exports);
__exportStar(require("./getCredentials"), exports);
__exportStar(require("./getImage"), exports);
__exportStar(require("./getRepository"), exports);
__exportStar(require("./lifecyclePolicy"), exports);
__exportStar(require("./lifecyclePolicyDocument"), exports);
__exportStar(require("./pullThroughCacheRule"), exports);
__exportStar(require("./registryPolicy"), exports);
__exportStar(require("./registryScanningConfiguration"), exports);
__exportStar(require("./replicationConfiguration"), exports);
__exportStar(require("./repository"), exports);
__exportStar(require("./repositoryPolicy"), exports);
// Import resources to register:
const lifecyclePolicy_1 = require("./lifecyclePolicy");
const pullThroughCacheRule_1 = require("./pullThroughCacheRule");
const registryPolicy_1 = require("./registryPolicy");
const registryScanningConfiguration_1 = require("./registryScanningConfiguration");
const replicationConfiguration_1 = require("./replicationConfiguration");
const repository_1 = require("./repository");
const repositoryPolicy_1 = require("./repositoryPolicy");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "aws:ecr/lifecyclePolicy:LifecyclePolicy":
                return new lifecyclePolicy_1.LifecyclePolicy(name, undefined, { urn });
            case "aws:ecr/pullThroughCacheRule:PullThroughCacheRule":
                return new pullThroughCacheRule_1.PullThroughCacheRule(name, undefined, { urn });
            case "aws:ecr/registryPolicy:RegistryPolicy":
                return new registryPolicy_1.RegistryPolicy(name, undefined, { urn });
            case "aws:ecr/registryScanningConfiguration:RegistryScanningConfiguration":
                return new registryScanningConfiguration_1.RegistryScanningConfiguration(name, undefined, { urn });
            case "aws:ecr/replicationConfiguration:ReplicationConfiguration":
                return new replicationConfiguration_1.ReplicationConfiguration(name, undefined, { urn });
            case "aws:ecr/repository:Repository":
                return new repository_1.Repository(name, undefined, { urn });
            case "aws:ecr/repositoryPolicy:RepositoryPolicy":
                return new repositoryPolicy_1.RepositoryPolicy(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "ecr/lifecyclePolicy", _module);
pulumi.runtime.registerResourceModule("aws", "ecr/pullThroughCacheRule", _module);
pulumi.runtime.registerResourceModule("aws", "ecr/registryPolicy", _module);
pulumi.runtime.registerResourceModule("aws", "ecr/registryScanningConfiguration", _module);
pulumi.runtime.registerResourceModule("aws", "ecr/replicationConfiguration", _module);
pulumi.runtime.registerResourceModule("aws", "ecr/repository", _module);
pulumi.runtime.registerResourceModule("aws", "ecr/repositoryPolicy", _module);
//# sourceMappingURL=index.js.map