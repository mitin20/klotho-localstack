"use strict";
// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../../utilities");
// Export members:
__exportStar(require("./clusterRole"), exports);
__exportStar(require("./clusterRoleBinding"), exports);
__exportStar(require("./clusterRoleBindingList"), exports);
__exportStar(require("./clusterRoleBindingPatch"), exports);
__exportStar(require("./clusterRoleList"), exports);
__exportStar(require("./clusterRolePatch"), exports);
__exportStar(require("./role"), exports);
__exportStar(require("./roleBinding"), exports);
__exportStar(require("./roleBindingList"), exports);
__exportStar(require("./roleBindingPatch"), exports);
__exportStar(require("./roleList"), exports);
__exportStar(require("./rolePatch"), exports);
// Import resources to register:
const clusterRole_1 = require("./clusterRole");
const clusterRoleBinding_1 = require("./clusterRoleBinding");
const clusterRoleBindingList_1 = require("./clusterRoleBindingList");
const clusterRoleBindingPatch_1 = require("./clusterRoleBindingPatch");
const clusterRoleList_1 = require("./clusterRoleList");
const clusterRolePatch_1 = require("./clusterRolePatch");
const role_1 = require("./role");
const roleBinding_1 = require("./roleBinding");
const roleBindingList_1 = require("./roleBindingList");
const roleBindingPatch_1 = require("./roleBindingPatch");
const roleList_1 = require("./roleList");
const rolePatch_1 = require("./rolePatch");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "kubernetes:rbac.authorization.k8s.io/v1beta1:ClusterRole":
                return new clusterRole_1.ClusterRole(name, undefined, { urn });
            case "kubernetes:rbac.authorization.k8s.io/v1beta1:ClusterRoleBinding":
                return new clusterRoleBinding_1.ClusterRoleBinding(name, undefined, { urn });
            case "kubernetes:rbac.authorization.k8s.io/v1beta1:ClusterRoleBindingList":
                return new clusterRoleBindingList_1.ClusterRoleBindingList(name, undefined, { urn });
            case "kubernetes:rbac.authorization.k8s.io/v1beta1:ClusterRoleBindingPatch":
                return new clusterRoleBindingPatch_1.ClusterRoleBindingPatch(name, undefined, { urn });
            case "kubernetes:rbac.authorization.k8s.io/v1beta1:ClusterRoleList":
                return new clusterRoleList_1.ClusterRoleList(name, undefined, { urn });
            case "kubernetes:rbac.authorization.k8s.io/v1beta1:ClusterRolePatch":
                return new clusterRolePatch_1.ClusterRolePatch(name, undefined, { urn });
            case "kubernetes:rbac.authorization.k8s.io/v1beta1:Role":
                return new role_1.Role(name, undefined, { urn });
            case "kubernetes:rbac.authorization.k8s.io/v1beta1:RoleBinding":
                return new roleBinding_1.RoleBinding(name, undefined, { urn });
            case "kubernetes:rbac.authorization.k8s.io/v1beta1:RoleBindingList":
                return new roleBindingList_1.RoleBindingList(name, undefined, { urn });
            case "kubernetes:rbac.authorization.k8s.io/v1beta1:RoleBindingPatch":
                return new roleBindingPatch_1.RoleBindingPatch(name, undefined, { urn });
            case "kubernetes:rbac.authorization.k8s.io/v1beta1:RoleList":
                return new roleList_1.RoleList(name, undefined, { urn });
            case "kubernetes:rbac.authorization.k8s.io/v1beta1:RolePatch":
                return new rolePatch_1.RolePatch(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("kubernetes", "rbac.authorization.k8s.io/v1beta1", _module);
//# sourceMappingURL=index.js.map