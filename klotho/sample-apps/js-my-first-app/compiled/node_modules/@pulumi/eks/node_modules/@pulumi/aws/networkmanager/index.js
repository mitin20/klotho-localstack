"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__exportStar(require("./connection"), exports);
__exportStar(require("./customerGatewayAssociation"), exports);
__exportStar(require("./device"), exports);
__exportStar(require("./getConnection"), exports);
__exportStar(require("./getConnections"), exports);
__exportStar(require("./getCoreNetworkPolicyDocument"), exports);
__exportStar(require("./getDevice"), exports);
__exportStar(require("./getDevices"), exports);
__exportStar(require("./getGlobalNetwork"), exports);
__exportStar(require("./getGlobalNetworks"), exports);
__exportStar(require("./getLink"), exports);
__exportStar(require("./getLinks"), exports);
__exportStar(require("./getSite"), exports);
__exportStar(require("./getSites"), exports);
__exportStar(require("./globalNetwork"), exports);
__exportStar(require("./link"), exports);
__exportStar(require("./linkAssociation"), exports);
__exportStar(require("./site"), exports);
__exportStar(require("./transitGatewayConnectPeerAssociation"), exports);
__exportStar(require("./transitGatewayRegistration"), exports);
// Import resources to register:
const connection_1 = require("./connection");
const customerGatewayAssociation_1 = require("./customerGatewayAssociation");
const device_1 = require("./device");
const globalNetwork_1 = require("./globalNetwork");
const link_1 = require("./link");
const linkAssociation_1 = require("./linkAssociation");
const site_1 = require("./site");
const transitGatewayConnectPeerAssociation_1 = require("./transitGatewayConnectPeerAssociation");
const transitGatewayRegistration_1 = require("./transitGatewayRegistration");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "aws:networkmanager/connection:Connection":
                return new connection_1.Connection(name, undefined, { urn });
            case "aws:networkmanager/customerGatewayAssociation:CustomerGatewayAssociation":
                return new customerGatewayAssociation_1.CustomerGatewayAssociation(name, undefined, { urn });
            case "aws:networkmanager/device:Device":
                return new device_1.Device(name, undefined, { urn });
            case "aws:networkmanager/globalNetwork:GlobalNetwork":
                return new globalNetwork_1.GlobalNetwork(name, undefined, { urn });
            case "aws:networkmanager/link:Link":
                return new link_1.Link(name, undefined, { urn });
            case "aws:networkmanager/linkAssociation:LinkAssociation":
                return new linkAssociation_1.LinkAssociation(name, undefined, { urn });
            case "aws:networkmanager/site:Site":
                return new site_1.Site(name, undefined, { urn });
            case "aws:networkmanager/transitGatewayConnectPeerAssociation:TransitGatewayConnectPeerAssociation":
                return new transitGatewayConnectPeerAssociation_1.TransitGatewayConnectPeerAssociation(name, undefined, { urn });
            case "aws:networkmanager/transitGatewayRegistration:TransitGatewayRegistration":
                return new transitGatewayRegistration_1.TransitGatewayRegistration(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "networkmanager/connection", _module);
pulumi.runtime.registerResourceModule("aws", "networkmanager/customerGatewayAssociation", _module);
pulumi.runtime.registerResourceModule("aws", "networkmanager/device", _module);
pulumi.runtime.registerResourceModule("aws", "networkmanager/globalNetwork", _module);
pulumi.runtime.registerResourceModule("aws", "networkmanager/link", _module);
pulumi.runtime.registerResourceModule("aws", "networkmanager/linkAssociation", _module);
pulumi.runtime.registerResourceModule("aws", "networkmanager/site", _module);
pulumi.runtime.registerResourceModule("aws", "networkmanager/transitGatewayConnectPeerAssociation", _module);
pulumi.runtime.registerResourceModule("aws", "networkmanager/transitGatewayRegistration", _module);
//# sourceMappingURL=index.js.map