"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SpawnError = exports.spawnStream = exports.spawnPromise = exports.exec = void 0;
const child_process_1 = __importDefault(require("child_process"));
const util_1 = require("util");
const logger_1 = require("./logger");
const execPromisified = (0, util_1.promisify)(child_process_1.default.exec);
async function exec(cmd, options) {
    const res = await execPromisified(cmd, {
        maxBuffer: 100 * 1024 * 1024,
        ...options,
        // ensure that git commands return english error messages
        env: { ...process.env, LANG: 'en_US' },
    });
    return res;
}
exports.exec = exec;
async function spawnPromise(cmd, cmdArgs, cwd) {
    const fullCmd = `${cmd} ${cmdArgs.join(' ')}`;
    logger_1.logger.info(`Running command: "${fullCmd}"`);
    return new Promise(function (resolve, reject) {
        const subprocess = child_process_1.default.spawn(cmd, cmdArgs, {
            cwd,
            // ensure that git commands return english error messages
            env: { ...process.env, LANG: 'en_US' },
        });
        let stderr = '';
        let stdout = '';
        subprocess.stdout.on('data', (data) => {
            stdout += data;
        });
        subprocess.stderr.on('data', (data) => {
            stderr += data;
        });
        subprocess.on('close', (code) => {
            if (code === 0 || code === null) {
                resolve({ cmdArgs, code, stderr, stdout });
            }
            else {
                const err = new SpawnError({ cmdArgs, code, stderr, stdout });
                logger_1.logger.verbose(`Error when running command: "${fullCmd}"`, err);
                reject(err);
            }
        });
        subprocess.on('error', (err) => {
            reject(err);
        });
    });
}
exports.spawnPromise = spawnPromise;
const spawnStream = (cmd, cmdArgs) => {
    return child_process_1.default.spawn(cmd, cmdArgs, {
        env: { ...process.env, LANG: 'en_US' },
    });
};
exports.spawnStream = spawnStream;
class SpawnError extends Error {
    constructor(context) {
        const cmdArgs = context.cmdArgs.join(' ');
        const message = `Code: ${context.code}, Args: "${cmdArgs}", Message: ${context.stderr.trim()}`;
        super(message);
        Error.captureStackTrace(this, SpawnError);
        this.name = 'SpawnError';
        this.message = message;
        this.context = context;
    }
}
exports.SpawnError = SpawnError;
