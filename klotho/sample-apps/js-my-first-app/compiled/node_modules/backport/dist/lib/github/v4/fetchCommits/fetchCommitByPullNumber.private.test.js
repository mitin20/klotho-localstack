"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const graphql_1 = require("graphql");
const getDevAccessToken_1 = require("../../../../test/private/getDevAccessToken");
const apiRequestV4Module = __importStar(require("../apiRequestV4"));
const fetchCommitByPullNumber_1 = require("./fetchCommitByPullNumber");
const accessToken = (0, getDevAccessToken_1.getDevAccessToken)();
describe('fetchCommitByPullNumber', () => {
    describe('snapshot request/response', () => {
        let spy;
        let commit;
        beforeEach(async () => {
            spy = jest.spyOn(apiRequestV4Module, 'apiRequestV4');
            commit = await (0, fetchCommitByPullNumber_1.fetchCommitByPullNumber)({
                repoOwner: 'elastic',
                repoName: 'kibana',
                accessToken,
                pullNumber: 121633,
                sourceBranch: 'master',
            });
        });
        it('makes the right queries', () => {
            const queries = spy.mock.calls.reduce((acc, call) => {
                const query = call[0].query;
                const name = apiRequestV4Module.getQueryName(query);
                return { ...acc, [name]: (0, graphql_1.print)(query) };
            }, {});
            const queryNames = Object.keys(queries);
            expect(queryNames).toEqual(['CommitByPullNumber']);
            queryNames.forEach((name) => {
                expect(queries[name]).toMatchSnapshot(`Query: ${name}`);
            });
        });
        it('returns the correct response', async () => {
            expect(commit).toMatchSnapshot();
        });
    });
    describe('when PR was merged', () => {
        it('is returned', async () => {
            const options = {
                accessToken,
                pullNumber: 5,
                repoName: 'backport-e2e',
                repoOwner: 'backport-org',
                sourceBranch: 'main',
            };
            const expectedCommit = {
                author: { email: 'sorenlouv@gmail.com', name: 'Søren Louv-Jansen' },
                suggestedTargetBranches: [],
                sourceCommit: {
                    branchLabelMapping: {
                        '^v(\\d+).(\\d+).\\d+$': '$1.$2',
                        '^v7.9.0$': '7.x',
                        '^v8.0.0$': 'master',
                    },
                    committedDate: '2020-08-15T12:40:19Z',
                    message: 'Add 🍏 emoji (#5)',
                    sha: 'ee8c492334cef1ca077a56addb79a26f79821d2f',
                },
                sourcePullRequest: {
                    number: 5,
                    url: 'https://github.com/backport-org/backport-e2e/pull/5',
                    mergeCommit: {
                        message: 'Add 🍏 emoji (#5)',
                        sha: 'ee8c492334cef1ca077a56addb79a26f79821d2f',
                    },
                },
                sourceBranch: 'master',
                pullRequestStates: [
                    {
                        branch: '7.8',
                        isSourceBranch: false,
                        label: 'v7.8.0',
                        mergeCommit: {
                            message: 'Add 🍏 emoji (#5) (#7)',
                            sha: '46cd6f9999effdf894a36dbc7db90e890f4be840',
                        },
                        number: 7,
                        state: 'MERGED',
                        url: 'https://github.com/backport-org/backport-e2e/pull/7',
                    },
                    {
                        branch: '7.x',
                        isSourceBranch: false,
                        label: 'v7.9.0',
                        mergeCommit: {
                            message: 'Add 🍏 emoji (#5) (#6)',
                            sha: '4bcd876d4ceaa73cf437bfc89b74d1a4e704c0a6',
                        },
                        number: 6,
                        state: 'MERGED',
                        url: 'https://github.com/backport-org/backport-e2e/pull/6',
                    },
                    {
                        branch: 'master',
                        isSourceBranch: true,
                        label: 'v8.0.0',
                        mergeCommit: {
                            message: 'Add 🍏 emoji (#5)',
                            sha: 'ee8c492334cef1ca077a56addb79a26f79821d2f',
                        },
                        number: 5,
                        state: 'MERGED',
                        url: 'https://github.com/backport-org/backport-e2e/pull/5',
                    },
                ],
            };
            expect(await (0, fetchCommitByPullNumber_1.fetchCommitByPullNumber)(options)).toEqual(expectedCommit);
        });
    });
    describe('when PR is still open', () => {
        it('throws an error', async () => {
            const options = {
                accessToken,
                pullNumber: 11,
                repoName: 'backport-e2e',
                repoOwner: 'backport-org',
                sourceBranch: 'main',
            };
            await expect((0, fetchCommitByPullNumber_1.fetchCommitByPullNumber)(options)).rejects.toThrowError(`The PR #11 is not merged`);
        });
    });
    describe('when PR does not exist', () => {
        it('throws an error', async () => {
            const options = {
                accessToken,
                pullNumber: 9999999999999,
                repoName: 'backport-e2e',
                repoOwner: 'backport-org',
                sourceBranch: 'main',
            };
            await expect((0, fetchCommitByPullNumber_1.fetchCommitByPullNumber)(options)).rejects.toThrowError(`Could not resolve to a PullRequest with the number of 9999999999999. (Github API v4)`);
        });
    });
});
