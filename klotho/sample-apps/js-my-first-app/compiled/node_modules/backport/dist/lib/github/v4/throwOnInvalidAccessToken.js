"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.throwOnInvalidAccessToken = void 0;
const lodash_1 = require("lodash");
const maybe_1 = require("../../../utils/maybe");
const BackportError_1 = require("../../BackportError");
const env_1 = require("../../env");
function throwOnInvalidAccessToken({ error, repoOwner, repoName, globalConfigFile, }) {
    function getSSOAuthUrl(ssoHeader) {
        const matches = ssoHeader?.match(/url=(.*)/);
        if (matches) {
            return matches[1];
        }
    }
    const statusCode = error.githubResponse.status;
    switch (statusCode) {
        case 200: {
            const repoNotFound = error.githubResponse.data.errors?.some((error) => error.type === 'NOT_FOUND' && error.path?.join('.') === 'repository');
            const grantedScopes = error.githubResponse.headers['x-oauth-scopes'] || '';
            const requiredScopes = error.githubResponse.headers['x-accepted-oauth-scopes'] || '';
            const ssoHeader = (0, maybe_1.maybe)(error.githubResponse.headers['x-github-sso']);
            if (repoNotFound) {
                const hasRequiredScopes = (0, lodash_1.isEmpty)((0, lodash_1.difference)(requiredScopes.split(','), grantedScopes.split(',')));
                // user does not have permission to the repo
                if (!hasRequiredScopes) {
                    throw new BackportError_1.BackportError(`You do not have access to the repository "${repoOwner}/${repoName}". Please make sure your access token has the required scopes.\n\nRequired scopes: ${requiredScopes}\nAccess token scopes: ${grantedScopes}`);
                }
                // repo does not exist
                throw new BackportError_1.BackportError(`The repository "${repoOwner}/${repoName}" doesn't exist`);
            }
            const repoAccessForbidden = error.githubResponse.data.errors?.some((error) => error.type === 'FORBIDDEN');
            const ssoAuthUrl = getSSOAuthUrl(ssoHeader);
            // user does not have permissions
            if (repoAccessForbidden && ssoAuthUrl) {
                throw new BackportError_1.BackportError(`Please follow the link to authorize your personal access token with SSO:\n\n${ssoAuthUrl}`);
            }
            break;
        }
        case 401:
            throw new BackportError_1.BackportError(`Please check your access token and make sure it is valid.\nConfig: ${(0, env_1.getGlobalConfigPath)(globalConfigFile)}`);
        default:
            return undefined;
    }
}
exports.throwOnInvalidAccessToken = throwOnInvalidAccessToken;
