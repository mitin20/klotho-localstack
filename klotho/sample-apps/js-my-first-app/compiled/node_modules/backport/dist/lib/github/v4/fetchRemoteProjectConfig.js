"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fetchRemoteProjectConfig = void 0;
const graphql_tag_1 = __importDefault(require("graphql-tag"));
const remoteConfig_1 = require("../../remoteConfig");
const apiRequestV4_1 = require("./apiRequestV4");
async function fetchRemoteProjectConfig(options) {
    const { accessToken, githubApiBaseUrlV4, repoName, repoOwner, sourceBranch } = options;
    const query = (0, graphql_tag_1.default) `
    query ProjectConfig(
      $repoOwner: String!
      $repoName: String!
      $sourceBranch: String!
    ) {
      repository(owner: $repoOwner, name: $repoName) {
        ref(qualifiedName: $sourceBranch) {
          target {
            ...RemoteConfigHistoryFragment
          }
        }
      }
    }

    ${remoteConfig_1.RemoteConfigHistoryFragment}
  `;
    try {
        const res = await (0, apiRequestV4_1.apiRequestV4)({
            githubApiBaseUrlV4,
            accessToken,
            query,
            variables: {
                repoOwner,
                repoName,
                sourceBranch,
            },
        });
        const remoteConfig = res.repository.ref.target.remoteConfigHistory.edges?.[0].remoteConfig;
        if (remoteConfig) {
            return (0, remoteConfig_1.parseRemoteConfig)(remoteConfig);
        }
    }
    catch (e) {
        throw new Error('Project config does not exist');
    }
}
exports.fetchRemoteProjectConfig = fetchRemoteProjectConfig;
