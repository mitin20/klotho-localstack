"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateTargetBranches = void 0;
const graphql_tag_1 = __importDefault(require("graphql-tag"));
const BackportError_1 = require("../../BackportError");
const apiRequestV4_1 = require("./apiRequestV4");
async function fetchTargetBranch({ accessToken, repoName, repoOwner, branchName, githubApiBaseUrlV4 = 'https://api.github.com/graphql', }) {
    const query = (0, graphql_tag_1.default) `
    query doesBranchExist(
      $repoOwner: String!
      $repoName: String!
      $branchName: String!
    ) {
      repository(owner: $repoOwner, name: $repoName) {
        ref(qualifiedName: $branchName) {
          id
        }
      }
    }
  `;
    const res = await (0, apiRequestV4_1.apiRequestV4)({
        githubApiBaseUrlV4,
        accessToken,
        query,
        variables: { repoOwner, repoName, branchName },
    });
    if (!res.repository.ref) {
        throw new BackportError_1.BackportError(`The branch "${branchName}" does not exist`);
    }
    return res.repository.ref;
}
async function validateTargetBranches({ accessToken, repoName, repoOwner, githubApiBaseUrlV4 }, targetBranches) {
    await Promise.all(targetBranches.map((targetBranch) => {
        return fetchTargetBranch({
            accessToken,
            repoName,
            repoOwner,
            branchName: targetBranch,
            githubApiBaseUrlV4,
        });
    }));
}
exports.validateTargetBranches = validateTargetBranches;
