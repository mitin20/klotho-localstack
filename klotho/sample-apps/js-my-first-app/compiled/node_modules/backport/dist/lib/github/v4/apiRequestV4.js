"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getQueryName = exports.GithubV4Exception = exports.apiRequestV4 = void 0;
const axios_1 = __importDefault(require("axios"));
const printer_1 = require("graphql/language/printer");
const lodash_1 = require("lodash");
const BackportError_1 = require("../../BackportError");
const logger_1 = require("../../logger");
async function apiRequestV4({ githubApiBaseUrlV4 = 'https://api.github.com/graphql', accessToken, query, variables, }) {
    try {
        const response = await axios_1.default.post(githubApiBaseUrlV4, { query: (0, printer_1.print)(query), variables }, {
            headers: {
                'Content-Type': 'application/json',
                Authorization: `bearer ${accessToken}`,
            },
        });
        if (response.data.errors) {
            throw new GithubV4Exception(response);
        }
        addDebugLogs({
            githubApiBaseUrlV4,
            query,
            variables,
            githubResponse: response,
        });
        return response.data.data;
    }
    catch (e) {
        if (isAxiosGithubError(e) && e.response) {
            addDebugLogs({
                githubApiBaseUrlV4,
                query,
                variables,
                githubResponse: e.response,
                didThrow: true,
            });
            throw new GithubV4Exception(e.response, e.message);
        }
        throw e;
    }
}
exports.apiRequestV4 = apiRequestV4;
function isAxiosGithubError(e) {
    return (axios_1.default.isAxiosError(e) &&
        e.response !== undefined &&
        (0, lodash_1.isObject)(e.response.data));
}
class GithubV4Exception extends Error {
    constructor(githubResponse, errorMessage) {
        const githubMessage = githubResponse.data.errors
            ?.map((error) => error.message)
            .join(',');
        const message = `${errorMessage ?? githubMessage ?? 'Unknown error'} (Github API v4)`;
        super(message);
        Error.captureStackTrace(this, BackportError_1.BackportError);
        this.name = 'GithubV4Exception';
        this.message = message;
        this.githubResponse = { ...githubResponse, request: undefined };
    }
}
exports.GithubV4Exception = GithubV4Exception;
function getQueryName(query) {
    //@ts-expect-error
    return query.definitions[0].name?.value;
}
exports.getQueryName = getQueryName;
function addDebugLogs({ githubApiBaseUrlV4, query, variables, githubResponse, didThrow = false, }) {
    const gqlQueryName = getQueryName(query);
    logger_1.logger.info(`POST ${githubApiBaseUrlV4} (name:${gqlQueryName}, status: ${githubResponse.status}${didThrow ? ', EXCEPTION THROWN' : ''})`);
    logger_1.logger.verbose(`Query: ${(0, printer_1.print)(query)}`);
    logger_1.logger.verbose('Variables:', variables);
    logger_1.logger.verbose('Response headers:', githubResponse.headers);
    logger_1.logger.verbose('Response data:', githubResponse.data);
}
