"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const getDevAccessToken_1 = require("../../../test/private/getDevAccessToken");
const validateTargetBranches_1 = require("./validateTargetBranches");
const accessToken = (0, getDevAccessToken_1.getDevAccessToken)();
describe('validateTargetBranches', () => {
    describe('no branches', () => {
        it('resolves', async () => {
            const options = {
                repoOwner: 'backport-org',
                repoName: 'repo-with-target-branches',
                accessToken,
            };
            const targetBranches = [];
            expect(await (0, validateTargetBranches_1.validateTargetBranches)(options, targetBranches)).toEqual(undefined);
        });
    });
    describe('one invalid and one valid branch', () => {
        it('throws', async () => {
            const options = {
                repoOwner: 'backport-org',
                repoName: 'repo-with-target-branches',
                accessToken,
            };
            const targetBranches = ['production', 'foo'];
            await expect(() => (0, validateTargetBranches_1.validateTargetBranches)(options, targetBranches)).rejects.toThrowError('The branch "foo" does not exist');
        });
    });
    describe('two valid branches', () => {
        it('resolves', async () => {
            const options = {
                repoOwner: 'backport-org',
                repoName: 'repo-with-target-branches',
                accessToken,
            };
            const targetBranches = ['production', 'staging'];
            expect(await (0, validateTargetBranches_1.validateTargetBranches)(options, targetBranches)).toEqual(undefined);
        });
    });
    describe('two invalid branches', () => {
        it('throws', async () => {
            const options = {
                repoOwner: 'backport-org',
                repoName: 'repo-with-target-branches',
                accessToken,
            };
            const targetBranches = ['foo', 'bar'];
            await expect(() => (0, validateTargetBranches_1.validateTargetBranches)(options, targetBranches)).rejects.toThrow(/The branch "(foo|bar)" does not exist/);
        });
    });
});
