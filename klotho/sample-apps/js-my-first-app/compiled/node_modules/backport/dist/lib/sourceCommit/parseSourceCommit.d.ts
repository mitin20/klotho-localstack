import { ValidConfigOptions } from '../../options/options';
import { RemoteConfigHistory } from '../remoteConfig';
import { TargetPullRequest } from './getPullRequestStates';
export interface Commit {
    author: SourceCommitWithTargetPullRequest['author'];
    sourceCommit: {
        committedDate: string;
        message: string;
        sha: string;
        branchLabelMapping: ValidConfigOptions['branchLabelMapping'];
    };
    sourcePullRequest?: {
        number: number;
        url: string;
        mergeCommit: {
            message: string;
            sha: string;
        };
    };
    sourceBranch: string;
    suggestedTargetBranches: string[];
    pullRequestStates: TargetPullRequest[];
}
export interface SourcePullRequestNode {
    baseRefName: string;
    url: string;
    number: number;
    labels: {
        nodes: {
            name: string;
        }[];
    };
    mergeCommit: {
        remoteConfigHistory: RemoteConfigHistory['remoteConfigHistory'];
        sha: string;
        message: string;
    };
    timelineItems: {
        edges: TimelineEdge[];
    };
}
export declare type TimelineEdge = TimelinePullRequestEdge | TimelineIssueEdge;
export interface TimelinePullRequestEdge {
    node: {
        targetPullRequest: {
            __typename: 'PullRequest';
            url: string;
            title: string;
            state: 'OPEN' | 'CLOSED' | 'MERGED';
            baseRefName: string;
            number: number;
            targetMergeCommit: {
                sha: string;
                message: string;
            } | null;
            repository: {
                name: string;
                owner: {
                    login: string;
                };
            };
            commits: {
                edges: Array<{
                    node: {
                        targetCommit: {
                            message: string;
                            sha: string;
                        };
                    };
                }>;
            };
        };
    };
}
interface TimelineIssueEdge {
    node: {
        targetPullRequest: {
            __typename: 'Issue';
        };
    };
}
export declare type SourceCommitWithTargetPullRequest = {
    repository: {
        name: string;
        owner: {
            login: string;
        };
    };
    sha: string;
    message: string;
    committedDate: string;
    author: {
        name: string;
        email: string;
    };
    associatedPullRequests: {
        edges: {
            node: SourcePullRequestNode;
        }[] | null;
    };
};
export declare function parseSourceCommit({ sourceCommit, options, }: {
    sourceCommit: SourceCommitWithTargetPullRequest;
    options: {
        branchLabelMapping?: ValidConfigOptions['branchLabelMapping'];
        sourceBranch: string;
    };
}): Commit;
export declare const SourceCommitWithTargetPullRequestFragment: import("graphql").DocumentNode;
export {};
