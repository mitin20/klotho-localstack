"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fetchCommitBySha = void 0;
const graphql_tag_1 = __importDefault(require("graphql-tag"));
const BackportError_1 = require("../../../BackportError");
const remoteConfig_1 = require("../../../remoteConfig");
const parseSourceCommit_1 = require("../../../sourceCommit/parseSourceCommit");
const apiRequestV4_1 = require("../apiRequestV4");
async function fetchCommitBySha(options) {
    const { accessToken, githubApiBaseUrlV4 = 'https://api.github.com/graphql', repoName, repoOwner, sha, sourceBranch, } = options;
    const query = (0, graphql_tag_1.default) `
    query CommitsBySha($repoOwner: String!, $repoName: String!, $sha: String!) {
      repository(owner: $repoOwner, name: $repoName) {
        object(expression: $sha) {
          ...SourceCommitWithTargetPullRequestFragment
        }
      }
    }

    ${parseSourceCommit_1.SourceCommitWithTargetPullRequestFragment}
  `;
    let res;
    try {
        res = await (0, apiRequestV4_1.apiRequestV4)({
            githubApiBaseUrlV4,
            accessToken,
            query,
            variables: {
                repoOwner,
                repoName,
                sha,
            },
        });
    }
    catch (e) {
        res = (0, remoteConfig_1.swallowMissingConfigFileException)(e);
    }
    const sourceCommit = res.repository.object;
    if (!sourceCommit) {
        throw new BackportError_1.BackportError(`No commit found on branch "${sourceBranch}" with sha "${sha}"`);
    }
    return (0, parseSourceCommit_1.parseSourceCommit)({ options, sourceCommit });
}
exports.fetchCommitBySha = fetchCommitBySha;
