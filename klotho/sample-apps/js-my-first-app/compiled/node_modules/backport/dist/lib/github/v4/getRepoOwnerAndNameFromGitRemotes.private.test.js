"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const getDevAccessToken_1 = require("../../../test/private/getDevAccessToken");
const sandbox_1 = require("../../../test/sandbox");
const childProcess = __importStar(require("../../child-process-promisified"));
const getRepoOwnerAndNameFromGitRemotes_1 = require("./getRepoOwnerAndNameFromGitRemotes");
const sandboxPath = (0, sandbox_1.getSandboxPath)({ filename: __filename });
const accessToken = (0, getDevAccessToken_1.getDevAccessToken)();
describe('fetchRemoteProjectConfig', () => {
    describe('when the remote is a fork', () => {
        it('retrives the original owner from github', async () => {
            await (0, sandbox_1.resetSandbox)(sandboxPath);
            const execOpts = { cwd: sandboxPath };
            await childProcess.exec(`git init`, execOpts);
            await childProcess.exec(`git remote add sqren git@github.com:sqren/kibana.git`, execOpts);
            expect(await (0, getRepoOwnerAndNameFromGitRemotes_1.getRepoOwnerAndNameFromGitRemotes)({
                accessToken,
                cwd: sandboxPath,
            })).toEqual({
                repoName: 'kibana',
                repoOwner: 'elastic',
            });
        });
    });
    describe('when none of the git remotes are found', () => {
        it('swallows the error and returns empty', async () => {
            await (0, sandbox_1.resetSandbox)(sandboxPath);
            const execOpts = { cwd: sandboxPath };
            await childProcess.exec(`git init`, execOpts);
            await childProcess.exec(`git remote add foo git@github.com:foo/kibana.git`, execOpts);
            await childProcess.exec(`git remote add bar git@github.com:bar/kibana.git`, execOpts);
            expect(await (0, getRepoOwnerAndNameFromGitRemotes_1.getRepoOwnerAndNameFromGitRemotes)({
                accessToken,
                cwd: sandboxPath,
            })).toEqual({});
        });
    });
    describe('when there are no git remotes', () => {
        it('returns empty', async () => {
            await (0, sandbox_1.resetSandbox)(sandboxPath);
            const execOpts = { cwd: sandboxPath };
            await childProcess.exec(`git init`, execOpts);
            expect(await (0, getRepoOwnerAndNameFromGitRemotes_1.getRepoOwnerAndNameFromGitRemotes)({
                accessToken,
                cwd: sandboxPath,
            })).toEqual({});
        });
    });
});
