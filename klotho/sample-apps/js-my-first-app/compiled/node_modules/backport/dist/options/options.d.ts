import { ConfigFileOptions, TargetBranchChoiceOrString } from './ConfigOptions';
import { OptionsFromCliArgs } from './cliArgs';
export declare type ValidConfigOptions = Readonly<Awaited<ReturnType<typeof getOptions>>>;
export declare const defaultConfigOptions: {
    assignees: string[];
    autoAssign: boolean;
    autoMerge: boolean;
    autoMergeMethod: string;
    backportBinary: string;
    cherrypickRef: boolean;
    commitPaths: string[];
    cwd: string;
    dateSince: null;
    dateUntil: null;
    details: boolean;
    fork: boolean;
    gitHostname: string;
    interactive: boolean;
    maxNumber: number;
    multipleBranches: boolean;
    multipleCommits: boolean;
    noVerify: boolean;
    publishStatusCommentOnAbort: boolean;
    publishStatusCommentOnSuccess: boolean;
    publishStatusCommentOnFailure: boolean;
    resetAuthor: boolean;
    reviewers: string[];
    sourcePRLabels: string[];
    targetBranchChoices: TargetBranchChoiceOrString[];
    targetBranches: string[];
    targetPRLabels: string[];
    signoff: boolean;
};
export declare function getOptions({ optionsFromCliArgs, optionsFromModule, }: {
    optionsFromCliArgs: OptionsFromCliArgs;
    optionsFromModule: ConfigFileOptions;
}): Promise<{
    accessToken: string;
    repoName: string;
    repoOwner: string;
    cwd: string;
    fork: boolean;
    dir?: string | undefined;
    interactive: boolean;
    logFilePath?: string | undefined;
    author: string | null;
    autoAssign: boolean;
    assignees: string[];
    autoMerge: boolean;
    autoMergeMethod: string;
    cherrypickRef: boolean;
    projectConfigFile?: string | undefined;
    globalConfigFile?: string | undefined;
    dateSince: string | null;
    dateUntil: string | null;
    details: boolean;
    dryRun?: boolean | undefined;
    editor?: string | undefined;
    skipRemoteConfig?: boolean | undefined;
    gitHostname: string;
    githubApiBaseUrlV3?: string | undefined;
    githubApiBaseUrlV4?: string | undefined;
    gitAuthorName?: string | undefined;
    gitAuthorEmail?: string | undefined;
    ls?: boolean | undefined;
    mainline?: number | undefined;
    signoff: boolean;
    maxNumber: number;
    multipleBranches: boolean;
    multipleCommits: boolean;
    noVerify: boolean;
    repoForkOwner: string;
    onlyMissing?: boolean | undefined;
    prDescription?: string | undefined;
    prTitle?: string | undefined;
    prFilter?: string | undefined;
    pullNumber?: number | number[] | undefined;
    sha?: string | string[] | undefined;
    resetAuthor: boolean;
    sourceBranch: string;
    commitPaths: string[];
    reviewers: string[];
    sourcePRLabels: string[];
    targetBranchChoices: TargetBranchChoiceOrString[];
    targetBranches: string[];
    targetPRLabels: string[];
    publishStatusCommentOnSuccess: boolean;
    publishStatusCommentOnFailure: boolean;
    publishStatusCommentOnAbort: boolean;
    autoFixConflicts?: (({ files, directory, logger, targetBranch, }: {
        files: string[];
        directory: string;
        logger: import("winston").Logger;
        targetBranch: string;
    }) => boolean | Promise<boolean>) | undefined;
    backportBinary: string;
    multiple?: boolean | undefined;
    help?: boolean | undefined;
    version?: boolean | undefined;
    v?: boolean | undefined;
    branchLabelMapping?: Record<string, string> | undefined;
    upstream?: string | undefined;
    branches?: TargetBranchChoiceOrString[] | undefined;
    labels?: string[] | undefined;
    authenticatedUsername: string;
    isRepoPrivate: boolean;
}>;
