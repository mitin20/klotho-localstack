"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCommits = exports.backportRun = exports.getLocalGlobalConfig = exports.getRemoteProjectConfig = exports.BackportError = void 0;
const backportRun_1 = require("./backportRun");
const fetchCommitByPullNumber_1 = require("./lib/github/v4/fetchCommits/fetchCommitByPullNumber");
const fetchCommitBySha_1 = require("./lib/github/v4/fetchCommits/fetchCommitBySha");
const fetchCommitsByAuthor_1 = require("./lib/github/v4/fetchCommits/fetchCommitsByAuthor");
const fetchPullRequestsBySearchQuery_1 = require("./lib/github/v4/fetchCommits/fetchPullRequestsBySearchQuery");
const getOptionsFromGithub_1 = require("./lib/github/v4/getOptionsFromGithub/getOptionsFromGithub");
const logger_1 = require("./lib/logger");
const excludeUndefined_1 = require("./utils/excludeUndefined");
var BackportError_1 = require("./lib/BackportError");
Object.defineProperty(exports, "BackportError", { enumerable: true, get: function () { return BackportError_1.BackportError; } });
var fetchRemoteProjectConfig_1 = require("./lib/github/v4/fetchRemoteProjectConfig");
Object.defineProperty(exports, "getRemoteProjectConfig", { enumerable: true, get: function () { return fetchRemoteProjectConfig_1.fetchRemoteProjectConfig; } });
var globalConfig_1 = require("./options/config/globalConfig");
Object.defineProperty(exports, "getLocalGlobalConfig", { enumerable: true, get: function () { return globalConfig_1.getGlobalConfig; } });
function backportRun({ options, processArgs = [], exitCodeOnFailure = true, }) {
    return (0, backportRun_1.backportRun)({
        optionsFromModule: (0, excludeUndefined_1.excludeUndefined)(options),
        processArgs,
        exitCodeOnFailure,
    });
}
exports.backportRun = backportRun;
async function getCommits(options) {
    (0, logger_1.initLogger)({ interactive: false, accessToken: options.accessToken });
    const optionsFromGithub = await (0, getOptionsFromGithub_1.getOptionsFromGithub)(options);
    if (options.pullNumber) {
        const pullNumbers = Array.isArray(options.pullNumber)
            ? options.pullNumber
            : [options.pullNumber];
        return Promise.all(pullNumbers.map((pullNumber) => (0, fetchCommitByPullNumber_1.fetchCommitByPullNumber)({
            ...optionsFromGithub,
            ...options,
            pullNumber,
        })));
    }
    if (options.sha) {
        const shas = Array.isArray(options.sha) ? options.sha : [options.sha];
        return Promise.all(shas.map((sha) => (0, fetchCommitBySha_1.fetchCommitBySha)({ ...optionsFromGithub, ...options, sha })));
    }
    if (options.prFilter) {
        return (0, fetchPullRequestsBySearchQuery_1.fetchPullRequestsBySearchQuery)({
            ...optionsFromGithub,
            ...options,
            prFilter: options.prFilter,
            author: options.author ?? null,
            dateSince: options.dateSince ?? null,
            dateUntil: options.dateUntil ?? null,
        });
    }
    if (options.author) {
        return (0, fetchCommitsByAuthor_1.fetchCommitsByAuthor)({
            ...optionsFromGithub,
            ...options,
            author: options.author,
            dateSince: options.dateSince ?? null,
            dateUntil: options.dateUntil ?? null,
        });
    }
    throw new Error('Must supply one of: `pullNumber`, `sha`, `prFilter` or `author`');
}
exports.getCommits = getCommits;
