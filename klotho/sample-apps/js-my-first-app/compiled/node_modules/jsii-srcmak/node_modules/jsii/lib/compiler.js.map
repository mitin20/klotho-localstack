{"version":3,"file":"compiler.js","sourceRoot":"","sources":["../src/compiler.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from 'node:fs';\nimport * as path from 'node:path';\nimport * as chalk from 'chalk';\nimport * as log4js from 'log4js';\nimport * as ts from 'typescript';\n\nimport { Assembler } from './assembler';\nimport * as Case from './case';\nimport { emitDownleveledDeclarations, TYPES_COMPAT } from './downlevel-dts';\nimport { Emitter } from './emitter';\nimport { JsiiDiagnostic } from './jsii-diagnostic';\nimport { ProjectInfo } from './project-info';\nimport { WARNINGSCODE_FILE_NAME } from './transforms/deprecation-warnings';\nimport * as utils from './utils';\n\nconst BASE_COMPILER_OPTIONS: ts.CompilerOptions = {\n  alwaysStrict: true,\n  declaration: true,\n  experimentalDecorators: true,\n  incremental: true,\n  lib: ['lib.es2020.d.ts'],\n  module: ts.ModuleKind.CommonJS,\n  noEmitOnError: true,\n  noFallthroughCasesInSwitch: true,\n  noImplicitAny: true,\n  noImplicitReturns: true,\n  noImplicitThis: true,\n  noUnusedLocals: true,\n  noUnusedParameters: true,\n  resolveJsonModule: true,\n  skipLibCheck: true,\n  strict: true,\n  strictNullChecks: true,\n  strictPropertyInitialization: true,\n  stripInternal: false,\n  target: ts.ScriptTarget.ES2020,\n};\n\nconst LOG = log4js.getLogger('jsii/compiler');\nexport const DIAGNOSTICS = 'diagnostics';\nexport const JSII_DIAGNOSTICS_CODE = 9999;\n\nexport interface CompilerOptions {\n  /** The information about the project to be built */\n  projectInfo: ProjectInfo;\n  /** Whether the compiler should watch for changes or just compile once */\n  watch?: boolean;\n  /** Whether to detect and generate TypeScript project references */\n  projectReferences?: boolean;\n  /** Whether to fail when a warning is emitted */\n  failOnWarnings?: boolean;\n  /** Whether to strip deprecated members from emitted artifacts */\n  stripDeprecated?: boolean;\n  /** The path to an allowlist of FQNs to strip if stripDeprecated is set */\n  stripDeprecatedAllowListFile?: string;\n  /** Whether to add warnings for deprecated elements */\n  addDeprecationWarnings?: boolean;\n  /**\n   * The name of the tsconfig file to generate\n   * @default \"tsconfig.json\"\n   */\n  generateTypeScriptConfig?: string;\n  /**\n   * Whether to compress the assembly\n   * @default false\n   */\n  compressAssembly?: boolean;\n}\n\nexport interface TypescriptConfig {\n  compilerOptions: ts.CompilerOptions;\n  include?: string[];\n  exclude?: string[];\n  references?: ts.ProjectReference[];\n}\n\nexport class Compiler implements Emitter {\n  private readonly system: ts.System;\n  private readonly compilerHost: ts.CompilerHost;\n  private typescriptConfig?: TypescriptConfig;\n  private rootFiles: string[] = [];\n  private readonly configPath: string;\n  private readonly projectReferences: boolean;\n\n  public constructor(private readonly options: CompilerOptions) {\n    const rootDir = this.options.projectInfo.projectRoot;\n    this.system = {\n      ...ts.sys,\n      getCurrentDirectory: () => rootDir,\n      createDirectory: (pth) => ts.sys.createDirectory(path.resolve(rootDir, pth)),\n      deleteFile: ts.sys.deleteFile && ((pth) => ts.sys.deleteFile!(path.join(rootDir, pth))),\n      fileExists: (pth) => ts.sys.fileExists(path.resolve(rootDir, pth)),\n      getFileSize: ts.sys.getFileSize && ((pth) => ts.sys.getFileSize!(path.resolve(rootDir, pth))),\n      readFile: (pth, encoding) => ts.sys.readFile(path.resolve(rootDir, pth), encoding),\n      watchFile:\n        ts.sys.watchFile &&\n        ((pth, callback, pollingInterval, watchOptions) =>\n          ts.sys.watchFile!(path.resolve(rootDir, pth), callback, pollingInterval, watchOptions)),\n      writeFile: (pth, data, writeByteOrderMark) =>\n        ts.sys.writeFile(path.resolve(rootDir, pth), data, writeByteOrderMark),\n    };\n    this.compilerHost = ts.createIncrementalCompilerHost(BASE_COMPILER_OPTIONS, this.system);\n\n    const configFileName = options.generateTypeScriptConfig ?? 'tsconfig.json';\n\n    this.configPath = path.join(this.options.projectInfo.projectRoot, configFileName);\n\n    this.projectReferences =\n      options.projectReferences !== undefined\n        ? options.projectReferences\n        : options.projectInfo.projectReferences !== undefined\n        ? options.projectInfo.projectReferences\n        : false;\n  }\n\n  /**\n   * Compiles the configured program.\n   *\n   * @param files can be specified to override the standard source code location logic. Useful for example when testing \"negatives\".\n   */\n  public emit(...files: string[]): ts.EmitResult {\n    this._prepareForBuild(...files);\n    return this._buildOnce();\n  }\n\n  /**\n   * Watches for file-system changes and dynamically recompiles the project as needed. In non-blocking mode, this\n   * returns the TypeScript watch handle for the application to use.\n   *\n   * @internal\n   */\n  public async watch(opts: NonBlockingWatchOptions): Promise<ts.Watch<ts.BuilderProgram>>;\n  /**\n   * Watches for file-system changes and dynamically recompiles the project as needed. In blocking mode, this results\n   * in a never-resolving promise.\n   */\n  public async watch(): Promise<never>;\n  public async watch(opts?: NonBlockingWatchOptions): Promise<ts.Watch<ts.BuilderProgram> | never> {\n    this._prepareForBuild();\n\n    const pi = this.options.projectInfo;\n    const projectRoot = pi.projectRoot;\n    const host = ts.createWatchCompilerHost(\n      this.configPath,\n      {\n        ...pi.tsc,\n        ...BASE_COMPILER_OPTIONS,\n        noEmitOnError: false,\n      },\n      this.system,\n      ts.createEmitAndSemanticDiagnosticsBuilderProgram,\n      opts?.reportDiagnostics,\n      opts?.reportWatchStatus,\n    );\n    if (!host.getDefaultLibLocation) {\n      throw new Error('No default library location was found on the TypeScript compiler host!');\n    }\n    const orig = host.afterProgramCreate;\n    // This is a callback cascade, so it's \"okay\" to return an unhandled promise there. This may\n    // cause an unhandled promise rejection warning, but that's not a big deal.\n    //\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    host.afterProgramCreate = (builderProgram) => {\n      const emitResult = this._consumeProgram(builderProgram.getProgram(), host.getDefaultLibLocation!());\n\n      for (const diag of emitResult.diagnostics.filter((d) => d.code === JSII_DIAGNOSTICS_CODE)) {\n        utils.logDiagnostic(diag, projectRoot);\n      }\n\n      if (orig) {\n        orig.call(host, builderProgram);\n      }\n      if (opts?.compilationComplete) {\n        opts.compilationComplete(emitResult);\n      }\n    };\n    const watch = ts.createWatchProgram(host);\n\n    if (opts?.nonBlocking) {\n      // In non-blocking mode, returns the handle to the TypeScript watch interface.\n      return watch;\n    }\n    // In blocking mode, returns a never-resolving promise.\n    return new Promise<never>(() => null);\n  }\n\n  /**\n   * Prepares the project for build, by creating the necessary configuration\n   * file(s), and assigning the relevant root file(s).\n   *\n   * @param files the files that were specified as input in the CLI invocation.\n   */\n  private _prepareForBuild(...files: string[]) {\n    this.buildTypeScriptConfig();\n    this.writeTypeScriptConfig();\n    this.rootFiles = this.determineSources(files);\n  }\n\n  /**\n   * Do a single build\n   */\n  private _buildOnce(): ts.EmitResult {\n    if (!this.compilerHost.getDefaultLibLocation) {\n      throw new Error('No default library location was found on the TypeScript compiler host!');\n    }\n\n    const tsconf = this.typescriptConfig!;\n    const pi = this.options.projectInfo;\n\n    const prog = ts.createIncrementalProgram({\n      rootNames: this.rootFiles.concat(_pathOfLibraries(this.compilerHost)),\n      options: {\n        ...pi.tsc,\n        ...(tsconf?.compilerOptions ?? BASE_COMPILER_OPTIONS),\n      },\n      // Make the references absolute for the compiler\n      projectReferences: tsconf.references?.map((ref) => ({\n        path: path.resolve(path.dirname(this.configPath), ref.path),\n      })),\n      host: this.compilerHost,\n    });\n\n    return this._consumeProgram(prog.getProgram(), this.compilerHost.getDefaultLibLocation());\n  }\n\n  private _consumeProgram(program: ts.Program, stdlib: string): ts.EmitResult {\n    const diagnostics = [...ts.getPreEmitDiagnostics(program)];\n    let hasErrors = false;\n\n    if (!hasErrors && this.diagsHaveAbortableErrors(diagnostics)) {\n      hasErrors = true;\n      LOG.error('Compilation errors prevented the JSII assembly from being created');\n    }\n\n    // Do the \"Assembler\" part first because we need some of the analysis done in there\n    // to post-process the AST\n    const assembler = new Assembler(this.options.projectInfo, this.system, program, stdlib, {\n      stripDeprecated: this.options.stripDeprecated,\n      stripDeprecatedAllowListFile: this.options.stripDeprecatedAllowListFile,\n      addDeprecationWarnings: this.options.addDeprecationWarnings,\n      compressAssembly: this.options.compressAssembly,\n    });\n\n    try {\n      const assmEmit = assembler.emit();\n      if (!hasErrors && (assmEmit.emitSkipped || this.diagsHaveAbortableErrors(assmEmit.diagnostics))) {\n        hasErrors = true;\n        LOG.error('Type model errors prevented the JSII assembly from being created');\n      }\n\n      diagnostics.push(...assmEmit.diagnostics);\n    } catch (e: any) {\n      diagnostics.push(JsiiDiagnostic.JSII_9997_UNKNOWN_ERROR.createDetached(e));\n      hasErrors = true;\n    }\n\n    // Do the emit, but add in transformers which are going to replace real\n    // comments with synthetic ones.\n    const emit = program.emit(\n      undefined, // targetSourceFile\n      undefined, // writeFile\n      undefined, // cancellationToken\n      undefined, // emitOnlyDtsFiles\n      assembler.customTransformers,\n    );\n    diagnostics.push(...emit.diagnostics);\n\n    if (!hasErrors && (emit.emitSkipped || this.diagsHaveAbortableErrors(emit.diagnostics))) {\n      hasErrors = true;\n      LOG.error('Compilation errors prevented the JSII assembly from being created');\n    }\n\n    if (!hasErrors) {\n      emitDownleveledDeclarations(this.options.projectInfo);\n    }\n\n    // Some extra validation on the config.\n    // Make sure that { \"./.warnings.jsii.js\": \"./.warnings.jsii.js\" } is in the set of\n    // exports, if they are specified.\n    if (this.options.addDeprecationWarnings && this.options.projectInfo.exports !== undefined) {\n      const expected = `./${WARNINGSCODE_FILE_NAME}`;\n      const warningsExport = Object.entries(this.options.projectInfo.exports).filter(\n        ([k, v]) => k === expected && v === expected,\n      );\n\n      if (warningsExport.length === 0) {\n        hasErrors = true;\n        diagnostics.push(JsiiDiagnostic.JSII_0007_MISSING_WARNINGS_EXPORT.createDetached());\n      }\n    }\n\n    return {\n      emitSkipped: hasErrors,\n      diagnostics: ts.sortAndDeduplicateDiagnostics(diagnostics),\n      emittedFiles: emit.emittedFiles,\n    };\n  }\n\n  /**\n   * Build the TypeScript config object\n   *\n   * This is the object that will be written to disk.\n   */\n  private buildTypeScriptConfig() {\n    let references: string[] | undefined;\n    if (this.projectReferences) {\n      references = this.findProjectReferences();\n    }\n\n    const pi = this.options.projectInfo;\n\n    this.typescriptConfig = {\n      compilerOptions: {\n        ...pi.tsc,\n        ...BASE_COMPILER_OPTIONS,\n        // Enable composite mode if project references are enabled\n        composite: this.projectReferences,\n        // When incremental, configure a tsbuildinfo file\n        tsBuildInfoFile: path.join(pi.tsc?.outDir ?? '.', 'tsconfig.tsbuildinfo'),\n      },\n      include: [pi.tsc?.rootDir != null ? path.join(pi.tsc.rootDir, '**', '*.ts') : path.join('**', '*.ts')],\n      exclude: [\n        'node_modules',\n        pi.tsc?.outDir != null ? path.resolve(pi.tsc.outDir, TYPES_COMPAT) : TYPES_COMPAT,\n        ...(pi.excludeTypescript ?? []),\n        ...(pi.tsc?.outDir != null &&\n        (pi.tsc?.rootDir == null || path.resolve(pi.tsc.outDir).startsWith(path.resolve(pi.tsc.rootDir) + path.sep))\n          ? [path.join(pi.tsc.outDir, '**', '*.ts')]\n          : []),\n      ],\n      // Change the references a little. We write 'originalpath' to the\n      // file under the 'path' key, which is the same as what the\n      // TypeScript compiler does. Make it relative so that the files are\n      // movable. Not strictly required but looks better.\n      references: references?.map((p) => ({ path: p })),\n    };\n  }\n\n  /**\n   * Creates a `tsconfig.json` file to improve the IDE experience.\n   *\n   * @return the fully qualified path to the `tsconfig.json` file\n   */\n  private writeTypeScriptConfig(): void {\n    const commentKey = '_generated_by_jsii_';\n    const commentValue = 'Generated by jsii - safe to delete, and ideally should be in .gitignore';\n\n    (this.typescriptConfig as any)[commentKey] = commentValue;\n\n    if (fs.existsSync(this.configPath)) {\n      const currentConfig = JSON.parse(fs.readFileSync(this.configPath, 'utf-8'));\n      if (!(commentKey in currentConfig)) {\n        throw new Error(\n          `A '${this.configPath}' file that was not generated by jsii is in ${this.options.projectInfo.projectRoot}. Aborting instead of overwriting.`,\n        );\n      }\n    }\n\n    const outputConfig = {\n      ...this.typescriptConfig,\n      compilerOptions: {\n        ...this.typescriptConfig?.compilerOptions,\n        lib: this.typescriptConfig?.compilerOptions?.lib?.map((lib) =>\n          // Drop the \"lib.\" prefix and \".d.ts\" suffix before writing up the tsconfig.json file\n          lib.slice(4, lib.length - 5),\n        ),\n        // Re-write the module, targets & jsx to be the JSON format instead of Programmatic API\n        module: (this.typescriptConfig?.compilerOptions?.module &&\n          ts.ModuleKind[this.typescriptConfig.compilerOptions.module]) as any,\n        newLine: newLineForTsconfigJson(this.typescriptConfig?.compilerOptions.newLine),\n        target: (this.typescriptConfig?.compilerOptions?.target &&\n          ts.ScriptTarget[this.typescriptConfig.compilerOptions.target]) as any,\n        jsx: (this.typescriptConfig?.compilerOptions?.jsx &&\n          Case.snake(ts.JsxEmit[this.typescriptConfig.compilerOptions.jsx])) as any,\n      },\n    };\n\n    LOG.debug(`Creating or updating ${chalk.blue(this.configPath)}`);\n    fs.writeFileSync(this.configPath, JSON.stringify(outputConfig, null, 2), 'utf8');\n\n    /**\n     * This is annoying - the values expected in the tsconfig.json file are not\n     * the same as the enum constant names, or their values. So we need this\n     * function to map the \"compiler API version\" to the \"tsconfig.json version\"\n     *\n     * @param newLine the compiler form of the new line configuration\n     *\n     * @return the requivalent value to put in tsconfig.json\n     */\n    function newLineForTsconfigJson(newLine: ts.NewLineKind | undefined) {\n      switch (newLine) {\n        case ts.NewLineKind.CarriageReturnLineFeed:\n          return 'crlf';\n        case ts.NewLineKind.LineFeed:\n          return 'lf';\n        default:\n          return undefined;\n      }\n    }\n  }\n\n  /**\n   * Find all dependencies that look like TypeScript projects.\n   *\n   * Enumerate all dependencies, if they have a tsconfig.json file with\n   * \"composite: true\" we consider them project references.\n   *\n   * (Note: TypeScript seems to only correctly find transitive project references\n   * if there's an \"index\" tsconfig.json of all projects somewhere up the directory\n   * tree)\n   */\n  private findProjectReferences(): string[] {\n    const pkg = this.options.projectInfo.packageJson;\n\n    const ret = new Array<string>();\n\n    const dependencyNames = new Set<string>();\n    for (const dependencyMap of [pkg.dependencies, pkg.devDependencies, pkg.peerDependencies]) {\n      if (dependencyMap === undefined) {\n        continue;\n      }\n      for (const name of Object.keys(dependencyMap)) {\n        dependencyNames.add(name);\n      }\n    }\n\n    for (const tsconfigFile of Array.from(dependencyNames).map((depName) => this.findMonorepoPeerTsconfig(depName))) {\n      if (!tsconfigFile) {\n        continue;\n      }\n\n      const { config: tsconfig } = ts.readConfigFile(tsconfigFile, this.system.readFile);\n\n      // Add references to any TypeScript package we find that is 'composite' enabled.\n      // Make it relative.\n      if (tsconfig.compilerOptions?.composite) {\n        ret.push(path.relative(this.options.projectInfo.projectRoot, path.dirname(tsconfigFile)));\n      } else {\n        // Not a composite package--if this package is in a node_modules directory, that is most\n        // likely correct, otherwise it is most likely an error (heuristic here, I don't know how to\n        // properly check this).\n        if (tsconfigFile.includes('node_modules')) {\n          LOG.warn('%s: not a composite TypeScript package, but it probably should be', path.dirname(tsconfigFile));\n        }\n      }\n    }\n\n    return ret;\n  }\n\n  /**\n   * Find source files using the same mechanism that the TypeScript compiler itself uses.\n   *\n   * Respects includes/excludes/etc.\n   *\n   * This makes it so that running 'typescript' and running 'jsii' has the same behavior.\n   */\n  private determineSources(files: string[]): string[] {\n    const ret = new Array<string>();\n\n    if (files.length > 0) {\n      ret.push(...files);\n    } else {\n      const parseConfigHost = parseConfigHostFromCompilerHost(this.compilerHost);\n      const parsed = ts.parseJsonConfigFileContent(\n        this.typescriptConfig,\n        parseConfigHost,\n        this.options.projectInfo.projectRoot,\n      );\n      ret.push(...parsed.fileNames);\n    }\n\n    return ret;\n  }\n\n  /**\n   * Resolve the given dependency name from the current package, and find the associated tsconfig.json location\n   *\n   * Because we have the following potential directory layout:\n   *\n   *   package/node_modules/some_dependency\n   *   package/tsconfig.json\n   *\n   * We resolve symlinks and only find a \"TypeScript\" dependency if doesn't have 'node_modules' in\n   * the path after resolving symlinks (i.e., if it's a peer package in the same monorepo).\n   *\n   * Returns undefined if no such tsconfig could be found.\n   */\n  private findMonorepoPeerTsconfig(depName: string): string | undefined {\n    // eslint-disable-next-line @typescript-eslint/no-require-imports,@typescript-eslint/no-var-requires\n    const { builtinModules } = require('node:module');\n    if ((builtinModules ?? []).includes(depName)) {\n      // Can happen for modules like 'punycode' which are declared as dependency for polyfill purposes\n      return undefined;\n    }\n\n    try {\n      const depDir = utils.findDependencyDirectory(depName, this.options.projectInfo.projectRoot);\n\n      const dep = path.join(depDir, 'tsconfig.json');\n      if (!fs.existsSync(dep)) {\n        return undefined;\n      }\n\n      // Resolve symlinks, to check if this is a monorepo peer\n      const dependencyRealPath = fs.realpathSync(dep);\n      if (dependencyRealPath.split(path.sep).includes('node_modules')) {\n        return undefined;\n      }\n\n      return dependencyRealPath;\n    } catch (e: any) {\n      // @types modules cannot be required, for example\n      if (['MODULE_NOT_FOUND', 'ERR_PACKAGE_PATH_NOT_EXPORTED'].includes(e.code)) {\n        return undefined;\n      }\n      throw e;\n    }\n  }\n\n  private diagsHaveAbortableErrors(diags: readonly ts.Diagnostic[]) {\n    return diags.some(\n      (d) =>\n        d.category === ts.DiagnosticCategory.Error ||\n        (this.options.failOnWarnings && d.category === ts.DiagnosticCategory.Warning),\n    );\n  }\n}\n\n/**\n * Options for Watch in non-blocking mode.\n *\n * @internal\n */\nexport interface NonBlockingWatchOptions {\n  /**\n   * Signals non-blocking execution\n   */\n  readonly nonBlocking: true;\n\n  /**\n   * Configures the diagnostics reporter\n   */\n  readonly reportDiagnostics: ts.DiagnosticReporter;\n\n  /**\n   * Configures the watch status reporter\n   */\n  readonly reportWatchStatus: ts.WatchStatusReporter;\n\n  /**\n   * This hook gets invoked when a compilation cycle (complete with Assembler execution) completes.\n   */\n  readonly compilationComplete: (emitResult: ts.EmitResult) => void;\n}\n\nfunction _pathOfLibraries(host: ts.CompilerHost | ts.WatchCompilerHost<any>): string[] {\n  if (!BASE_COMPILER_OPTIONS.lib || BASE_COMPILER_OPTIONS.lib.length === 0) {\n    return [];\n  }\n  const lib = host.getDefaultLibLocation?.();\n  if (!lib) {\n    throw new Error(\n      `Compiler host doesn't have a default library directory available for ${BASE_COMPILER_OPTIONS.lib.join(', ')}`,\n    );\n  }\n  return BASE_COMPILER_OPTIONS.lib.map((name) => path.join(lib, name));\n}\n\nfunction parseConfigHostFromCompilerHost(host: ts.CompilerHost): ts.ParseConfigHost {\n  // Copied from upstream\n  // https://github.com/Microsoft/TypeScript/blob/9e05abcfd3f8bb3d6775144ede807daceab2e321/src/compiler/program.ts#L3105\n  return {\n    fileExists: (f) => host.fileExists(f),\n    readDirectory(root, extensions, excludes, includes, depth) {\n      if (host.readDirectory === undefined) {\n        throw new Error(\"'CompilerHost.readDirectory' must be implemented to correctly process 'projectReferences'\");\n      }\n      return host.readDirectory(root, extensions, excludes, includes, depth);\n    },\n    readFile: (f) => host.readFile(f),\n    useCaseSensitiveFileNames: host.useCaseSensitiveFileNames(),\n    trace: host.trace ? (s) => host.trace!(s) : undefined,\n  };\n}\n"]}