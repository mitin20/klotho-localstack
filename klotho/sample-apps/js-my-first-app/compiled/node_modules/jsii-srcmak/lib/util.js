"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateOptions = exports.exec = exports.mkdtemp = void 0;
const child_process_1 = require("child_process");
const os = __importStar(require("os"));
const path = __importStar(require("path"));
const fs = __importStar(require("fs-extra"));
async function mkdtemp(closure) {
    const workdir = await fs.mkdtemp(path.join(os.tmpdir(), 'temp-'));
    try {
        await closure(workdir);
        if (!process.env.RETAIN_TMP) {
            await fs.remove(workdir);
        }
        else {
            console.error(`NOTE: Temp directory retained (RETAIN_TMP=1): ${workdir}`);
        }
    }
    catch (e) {
        console.error(`NOTE: Temp directory retained due to an error: ${workdir}`);
        throw e;
    }
}
exports.mkdtemp = mkdtemp;
async function exec(moduleName, args = [], options = {}) {
    return new Promise((ok, fail) => {
        var _a, _b;
        const opts = {
            ...options,
            stdio: ['inherit', 'pipe', 'pipe'],
            shell: true,
        };
        const child = (0, child_process_1.spawn)(`"${process.execPath}"`, [moduleName, ...args], opts);
        const data = new Array();
        (_a = child.stdout) === null || _a === void 0 ? void 0 : _a.on('data', chunk => data.push(chunk));
        (_b = child.stderr) === null || _b === void 0 ? void 0 : _b.on('data', chunk => data.push(chunk));
        const newError = (message) => {
            var _a, _b;
            return new Error([
                message,
                '  | ' + Buffer.concat(data).toString('utf-8').split('\n').filter(x => x).join('\n  | '),
                '  +----------------------------------------------------------------------------------',
                `  | Command: ${moduleName} ${args.join(' ')}`,
                `  | Workdir: ${path.resolve((_b = (_a = options.cwd) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : '.')}`,
                '  +----------------------------------------------------------------------------------',
            ].join('\n'));
        };
        child.once('error', err => {
            throw newError(`jsii compilation failed. error: ${err.message}`);
        });
        child.once('exit', code => {
            if (code === 0) {
                return ok();
            }
            else {
                return fail(newError(`jsii compilation failed with non-zero exit code: ${code}`));
            }
        });
    });
}
exports.exec = exec;
/**
 * This validates that the Python module name, Java package name, and C# namespace
 * conform to language-specific constraints.
 *
 * @param options Options set by the consumer
 * @throws error if options do not conform
 */
function validateOptions(options) {
    var _a, _b, _c, _d;
    if ((_a = options.python) === null || _a === void 0 ? void 0 : _a.moduleName.includes('-')) {
        throw new Error(`Python moduleName [${options.python.moduleName}] may not contain "-"`);
    }
    if ((_b = options.java) === null || _b === void 0 ? void 0 : _b.package.includes('-')) {
        throw new Error(`Java package [${options.java.package}] may not contain "-"`);
    }
    if ((_c = options.csharp) === null || _c === void 0 ? void 0 : _c.namespace.includes('-')) {
        throw new Error(`C# namespace [${options.csharp.namespace}] may not contain "-"`);
    }
    if ((_d = options.golang) === null || _d === void 0 ? void 0 : _d.moduleName.includes('_')) {
        throw new Error(`Go module name [${options.golang.moduleName}] may not contain "_"`);
    }
}
exports.validateOptions = validateOptions;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsaURBQW9EO0FBQ3BELHVDQUF5QjtBQUN6QiwyQ0FBNkI7QUFDN0IsNkNBQStCO0FBR3hCLEtBQUssVUFBVSxPQUFPLENBQUMsT0FBdUM7SUFDbkUsTUFBTSxPQUFPLEdBQUcsTUFBTSxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDbEUsSUFBSTtRQUNGLE1BQU0sT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRXZCLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRTtZQUMzQixNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDMUI7YUFBTTtZQUNMLE9BQU8sQ0FBQyxLQUFLLENBQUMsaURBQWlELE9BQU8sRUFBRSxDQUFDLENBQUM7U0FDM0U7S0FDRjtJQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ1YsT0FBTyxDQUFDLEtBQUssQ0FBQyxrREFBa0QsT0FBTyxFQUFFLENBQUMsQ0FBQztRQUMzRSxNQUFNLENBQUMsQ0FBQztLQUNUO0FBQ0gsQ0FBQztBQWRELDBCQWNDO0FBRU0sS0FBSyxVQUFVLElBQUksQ0FBQyxVQUFrQixFQUFFLE9BQWlCLEVBQUUsRUFBRSxVQUF3QixFQUFHO0lBQzdGLE9BQU8sSUFBSSxPQUFPLENBQU8sQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLEVBQUU7O1FBRXBDLE1BQU0sSUFBSSxHQUFpQjtZQUN6QixHQUFHLE9BQU87WUFDVixLQUFLLEVBQUUsQ0FBQyxTQUFTLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQztZQUNsQyxLQUFLLEVBQUUsSUFBSTtTQUNaLENBQUM7UUFDRixNQUFNLEtB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QzVDLE1BQU0sSUFBSSxLQUFLLENBQUMsbUJBQW1CLE9BQU8sQ0FBQyxNQUFNLENBQUMsVUFBVSx1QkFBdUIsQ0FBQyxDQUFDO0tBQ3RGO0FBQ0gsQ0FBQztBQWhCRCwwQ0FnQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzcGF3biwgU3Bhd25PcHRpb25zIH0gZnJvbSAnY2hpbGRfcHJvY2Vzcyc7XG5pbXBvcnQgKiBhcyBvcyBmcm9tICdvcyc7XG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMtZXh0cmEnO1xuaW1wb3J0IHsgT3B0aW9ucyB9IGZyb20gJy4vb3B0aW9ucyc7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBta2R0ZW1wKGNsb3N1cmU6IChkaXI6IHN0cmluZykgPT4gUHJvbWlzZTx2b2lkPikge1xuICBjb25zdCB3b3JrZGlyID0gYXdhaXQgZnMubWtkdGVtcChwYXRoLmpvaW4ob3MudG1wZGlyKCksICd0ZW1wLScpKTtcbiAgdHJ5IHtcbiAgICBhd2FpdCBjbG9zdXJlKHdvcmtkaXIpO1xuXG4gICAgaWYgKCFwcm9jZXNzLmVudi5SRVRBSU5fVE1QKSB7XG4gICAgICBhd2FpdCBmcy5yZW1vdmUod29ya2Rpcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoYE5PVEU6IFRlbXAgZGlyZWN0b3J5IHJldGFpbmVkIChSRVRBSU5fVE1QPTEpOiAke3dvcmtkaXJ9YCk7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgY29uc29sZS5lcnJvcihgTk9URTogVGVtcCBkaXJlY3RvcnkgcmV0YWluZWQgZHVlIHRvIGFuIGVycm9yOiAke3dvcmtkaXJ9YCk7XG4gICAgdGhyb3cgZTtcbiAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZXhlYyhtb2R1bGVOYW1lOiBzdHJpbmcsIGFyZ3M6IHN0cmluZ1tdID0gW10sIG9wdGlvbnM6IFNwYXduT3B0aW9ucyA9IHsgfSkge1xuICByZXR1cm4gbmV3IFByb21pc2U8dm9pZD4oKG9rLCBmYWlsKSA9PiB7XG5cbiAgICBjb25zdCBvcHRzOiBTcGF3bk9wdGlvbnMgPSB7XG4gICAgICAuLi5vcHRpb25zLFxuICAgICAgc3RkaW86IFsnaW5oZXJpdCcsICdwaXBlJywgJ3BpcGUnXSxcbiAgICAgIHNoZWxsOiB0cnVlLFxuICAgIH07XG4gICAgY29uc3QgY2hpbGQgPSBzcGF3bihgXCIke3Byb2Nlc3MuZXhlY1BhdGh9XCJgLCBbbW9kdWxlTmFtZSwgLi4uYXJnc10sIG9wdHMpO1xuXG4gICAgY29uc3QgZGF0YSA9IG5ldyBBcnJheTxCdWZmZXI+KCk7XG4gICAgY2hpbGQuc3Rkb3V0Py5vbignZGF0YScsIGNodW5rID0+IGRhdGEucHVzaChjaHVuaykpO1xuICAgIGNoaWxkLnN0ZGVycj8ub24oJ2RhdGEnLCBjaHVuayA9PiBkYXRhLnB1c2goY2h1bmspKTtcblxuICAgIGNvbnN0IG5ld0Vycm9yID0gKG1lc3NhZ2U6IHN0cmluZykgPT4gbmV3IEVycm9yKFtcbiAgICAgIG1lc3NhZ2UsXG4gICAgICAnICB8ICcgKyBCdWZmZXIuY29uY2F0KGRhdGEpLnRvU3RyaW5nKCd1dGYtOCcpLnNwbGl0KCdcXG4nKS5maWx0ZXIoeCA9PiB4KS5qb2luKCdcXG4gIHwgJyksXG4gICAgICAnICArLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLScsXG4gICAgICBgICB8IENvbW1hbmQ6ICR7bW9kdWxlTmFtZX0gJHthcmdzLmpvaW4oJyAnKX1gLFxuICAgICAgYCAgfCBXb3JrZGlyOiAke3BhdGgucmVzb2x2ZShvcHRpb25zLmN3ZD8udG9TdHJpbmcoKSA/PyAnLicpfWAsXG4gICAgICAnICArLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLScsXG4gICAgXS5qb2luKCdcXG4nKSk7XG5cbiAgICBjaGlsZC5vbmNlKCdlcnJvcicsIGVyciA9PiB7XG4gICAgICB0aHJvdyBuZXdFcnJvcihganNpaSBjb21waWxhdGlvbiBmYWlsZWQuIGVycm9yOiAke2Vyci5tZXNzYWdlfWApO1xuICAgIH0pO1xuXG4gICAgY2hpbGQub25jZSgnZXhpdCcsIGNvZGUgPT4ge1xuICAgICAgaWYgKGNvZGUgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIG9rKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZmFpbChuZXdFcnJvcihganNpaSBjb21waWxhdGlvbiBmYWlsZWQgd2l0aCBub24temVybyBleGl0IGNvZGU6ICR7Y29kZX1gKSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xufVxuXG4vKipcbiAqIFRoaXMgdmFsaWRhdGVzIHRoYXQgdGhlIFB5dGhvbiBtb2R1bGUgbmFtZSwgSmF2YSBwYWNrYWdlIG5hbWUsIGFuZCBDIyBuYW1lc3BhY2VcbiAqIGNvbmZvcm0gdG8gbGFuZ3VhZ2Utc3BlY2lmaWMgY29uc3RyYWludHMuXG4gKlxuICogQHBhcmFtIG9wdGlvbnMgT3B0aW9ucyBzZXQgYnkgdGhlIGNvbnN1bWVyXG4gKiBAdGhyb3dzIGVycm9yIGlmIG9wdGlvbnMgZG8gbm90IGNvbmZvcm1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlT3B0aW9ucyhvcHRpb25zOiBPcHRpb25zKSB7XG4gIGlmIChvcHRpb25zLnB5dGhvbj8ubW9kdWxlTmFtZS5pbmNsdWRlcygnLScpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBQeXRob24gbW9kdWxlTmFtZSBbJHtvcHRpb25zLnB5dGhvbi5tb2R1bGVOYW1lfV0gbWF5IG5vdCBjb250YWluIFwiLVwiYCk7XG4gIH1cblxuICBpZiAob3B0aW9ucy5qYXZhPy5wYWNrYWdlLmluY2x1ZGVzKCctJykpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEphdmEgcGFja2FnZSBbJHtvcHRpb25zLmphdmEucGFja2FnZX1dIG1heSBub3QgY29udGFpbiBcIi1cImApO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMuY3NoYXJwPy5uYW1lc3BhY2UuaW5jbHVkZXMoJy0nKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgQyMgbmFtZXNwYWNlIFske29wdGlvbnMuY3NoYXJwLm5hbWVzcGFjZX1dIG1heSBub3QgY29udGFpbiBcIi1cImApO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMuZ29sYW5nPy5tb2R1bGVOYW1lLmluY2x1ZGVzKCdfJykpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEdvIG1vZHVsZSBuYW1lIFske29wdGlvbnMuZ29sYW5nLm1vZHVsZU5hbWV9XSBtYXkgbm90IGNvbnRhaW4gXCJfXCJgKTtcbiAgfVxufVxuIl19